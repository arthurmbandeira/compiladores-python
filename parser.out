Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> decSeq
Rule 2     dec -> varDec
Rule 3     dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
Rule 4     dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
Rule 5     varDec -> type varSpecSeq PONTOVIRGULA
Rule 6     varSpec -> ID
Rule 7     varSpec -> ID ATRIB literal
Rule 8     varSpec -> ID ABRECOLCH NUMBER FECHACOLCH
Rule 9     varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE
Rule 10    type -> INT
Rule 11    type -> STRING
Rule 12    type -> BOOL
Rule 13    param -> type ID
Rule 14    param -> type ID ABRECOLCH FECHACOLCH
Rule 15    block -> varDecList stmtList
Rule 16    stmt -> ifStmt
Rule 17    stmt -> whileStmt
Rule 18    stmt -> forStmt
Rule 19    stmt -> breakStmt
Rule 20    stmt -> returnStmt
Rule 21    stmt -> readStmt
Rule 22    stmt -> writeStmt
Rule 23    stmt -> assign PONTOVIRGULA
Rule 24    stmt -> subCall PONTOVIRGULA
Rule 25    ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
Rule 26    ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE
Rule 27    whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
Rule 28    forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE
Rule 29    breakStmt -> BREAK PONTOVIRGULA
Rule 30    readStmt -> READ var PONTOVIRGULA
Rule 31    writeStmt -> WRITE expList PONTOVIRGULA
Rule 32    returnStmt -> RETURN PONTOVIRGULA
Rule 33    returnStmt -> RETURN exp PONTOVIRGULA
Rule 34    subCall -> ID ABREPAREN expList FECHAPAREN
Rule 35    assign -> var ATRIB exp
Rule 36    assign -> var MAISATRIB exp
Rule 37    assign -> var MENOSATRIB exp
Rule 38    assign -> var MULTATRIB exp
Rule 39    assign -> var DIVATRIB exp
Rule 40    assign -> var MODATRIB exp
Rule 41    var -> ID
Rule 42    var -> ID ABRECOLCH exp FECHACOLCH
Rule 43    exp -> exp MAIS exp
Rule 44    exp -> exp MENOS exp
Rule 45    exp -> exp MULT exp
Rule 46    exp -> exp DIV exp
Rule 47    exp -> exp MOD exp
Rule 48    exp -> exp IGUAL exp
Rule 49    exp -> exp DIFERENTE exp
Rule 50    exp -> exp MENORIGUAL exp
Rule 51    exp -> exp MAIORIGUAL exp
Rule 52    exp -> exp MAIOR exp
Rule 53    exp -> exp MENOR exp
Rule 54    exp -> exp E exp
Rule 55    exp -> exp OU exp
Rule 56    exp -> NEG exp
Rule 57    exp -> SINAL exp
Rule 58    exp -> exp TERNARIOSE exp TERNARIOSENAO exp
Rule 59    exp -> subCall
Rule 60    exp -> var
Rule 61    exp -> literal
Rule 62    exp -> ABREPAREN exp FECHAPAREN
Rule 63    exp -> param
Rule 64    literal -> NUMBER
Rule 65    literal -> CADEIA
Rule 66    literal -> TRUE
Rule 67    literal -> FALSE
Rule 68    paramList -> paramSeq
Rule 69    paramList -> empty
Rule 70    paramSeq -> param VIRGULA paramSeq
Rule 71    paramSeq -> param
Rule 72    varDecList -> varDec varDecList
Rule 73    varDecList -> empty
Rule 74    varSpecSeq -> varSpec VIRGULA varSpecSeq
Rule 75    varSpecSeq -> varSpec
Rule 76    expList -> expSeq
Rule 77    expList -> empty
Rule 78    literalSeq -> literal VIRGULA literalSeq
Rule 79    literalSeq -> literal
Rule 80    stmtList -> stmt stmtList
Rule 81    stmtList -> empty
Rule 82    decSeq -> dec decSeq
Rule 83    decSeq -> dec
Rule 84    expSeq -> exp VIRGULA expSeq
Rule 85    expSeq -> exp
Rule 86    empty -> <empty>

Terminals, with rules where they appear

ABRECHAVE            : 3 4 9 25 26 27 28
ABRECOLCH            : 8 9 14 42
ABREPAREN            : 3 4 25 26 27 28 34 62
ATRIB                : 7 9 35
BOOL                 : 12
BREAK                : 29
CADEIA               : 65
DIFERENTE            : 49
DIV                  : 46
DIVATRIB             : 39
E                    : 54
ELSE                 : 26
FALSE                : 67
FECHACHAVE           : 3 4 9 25 26 26 26 27 28
FECHACOLCH           : 8 9 14 42
FECHAPAREN           : 3 4 25 26 27 28 34 62
FOR                  : 28
ID                   : 3 4 6 7 8 9 13 14 34 41 42
IF                   : 25 26
IGUAL                : 48
INT                  : 10
MAIOR                : 52
MAIORIGUAL           : 51
MAIS                 : 43
MAISATRIB            : 36
MENOR                : 53
MENORIGUAL           : 50
MENOS                : 44
MENOSATRIB           : 37
MOD                  : 47
MODATRIB             : 40
MULT                 : 45
MULTATRIB            : 38
NEG                  : 56
NUMBER               : 8 9 64
OU                   : 55
PONTOVIRGULA         : 5 23 24 28 28 29 30 31 32 33
READ                 : 30
RETURN               : 32 33
SINAL                : 57
STRING               : 11
TERNARIOSE           : 58
TERNARIOSENAO        : 58
TRUE                 : 66
VIRGULA              : 70 74 78 84
WHILE                : 27
WRITE                : 31
error                : 

Nonterminals, with rules where they appear

assign               : 23 28 28
block                : 3 4 25 26 26 27 28
breakStmt            : 19
dec                  : 82 83
decSeq               : 1 82
empty                : 69 73 77 81
exp                  : 25 26 27 28 33 35 36 37 38 39 40 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 57 58 58 58 62 84 85
expList              : 31 34
expSeq               : 76 84
forStmt              : 18
ifStmt               : 16
literal              : 7 61 78 79
literalSeq           : 9 78
param                : 63 70 71
paramList            : 3 4
paramSeq             : 68 70
program              : 0
readStmt             : 21
returnStmt           : 20
stmt                 : 80
stmtList             : 15 80
subCall              : 24 59
type                 : 4 5 13 14
var                  : 30 35 36 37 38 39 40 60
varDec               : 2 72
varDecList           : 15 72
varSpec              : 74 75
varSpecSeq           : 5 74
whileStmt            : 17
writeStmt            : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . decSeq
    (82) decSeq -> . dec decSeq
    (83) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (4) dec -> . type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    ID              shift and go to state 6
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    program                        shift and go to state 1
    decSeq                         shift and go to state 2
    type                           shift and go to state 8
    varDec                         shift and go to state 4
    dec                            shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> decSeq .

    $end            reduce using rule 1 (program -> decSeq .)


state 3

    (12) type -> BOOL .

    ID              reduce using rule 12 (type -> BOOL .)


state 4

    (2) dec -> varDec .

    ID              reduce using rule 2 (dec -> varDec .)
    INT             reduce using rule 2 (dec -> varDec .)
    STRING          reduce using rule 2 (dec -> varDec .)
    BOOL            reduce using rule 2 (dec -> varDec .)
    $end            reduce using rule 2 (dec -> varDec .)


state 5

    (82) decSeq -> dec . decSeq
    (83) decSeq -> dec .
    (82) decSeq -> . dec decSeq
    (83) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (4) dec -> . type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    $end            reduce using rule 83 (decSeq -> dec .)
    ID              shift and go to state 6
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    decSeq                         shift and go to state 10
    type                           shift and go to state 8
    varDec                         shift and go to state 4
    dec                            shift and go to state 5

state 6

    (3) dec -> ID . ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE

    ABREPAREN       shift and go to state 11


state 7

    (10) type -> INT .

    ID              reduce using rule 10 (type -> INT .)


state 8

    (4) dec -> type . ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (5) varDec -> type . varSpecSeq PONTOVIRGULA
    (74) varSpecSeq -> . varSpec VIRGULA varSpecSeq
    (75) varSpecSeq -> . varSpec
    (6) varSpec -> . ID
    (7) varSpec -> . ID ATRIB literal
    (8) varSpec -> . ID ABRECOLCH NUMBER FECHACOLCH
    (9) varSpec -> . ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    ID              shift and go to state 12

    varSpec                        shift and go to state 13
    varSpecSeq                     shift and go to state 14

state 9

    (11) type -> STRING .

    ID              reduce using rule 11 (type -> STRING .)


state 10

    (82) decSeq -> dec decSeq .

    $end            reduce using rule 82 (decSeq -> dec decSeq .)


state 11

    (3) dec -> ID ABREPAREN . paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (68) paramList -> . paramSeq
    (69) paramList -> . empty
    (70) paramSeq -> . param VIRGULA paramSeq
    (71) paramSeq -> . param
    (86) empty -> .
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    FECHAPAREN      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    paramSeq                       shift and go to state 17
    paramList                      shift and go to state 15
    empty                          shift and go to state 18
    param                          shift and go to state 19
    type                           shift and go to state 16

state 12

    (4) dec -> type ID . ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (6) varSpec -> ID .
    (7) varSpec -> ID . ATRIB literal
    (8) varSpec -> ID . ABRECOLCH NUMBER FECHACOLCH
    (9) varSpec -> ID . ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    ABREPAREN       shift and go to state 20
    VIRGULA         reduce using rule 6 (varSpec -> ID .)
    PONTOVIRGULA    reduce using rule 6 (varSpec -> ID .)
    ATRIB           shift and go to state 22
    ABRECOLCH       shift and go to state 21


state 13

    (74) varSpecSeq -> varSpec . VIRGULA varSpecSeq
    (75) varSpecSeq -> varSpec .

    VIRGULA         shift and go to state 23
    PONTOVIRGULA    reduce using rule 75 (varSpecSeq -> varSpec .)


state 14

    (5) varDec -> type varSpecSeq . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 24


state 15

    (3) dec -> ID ABREPAREN paramList . FECHAPAREN ABRECHAVE block FECHACHAVE

    FECHAPAREN      shift and go to state 25


state 16

    (13) param -> type . ID
    (14) param -> type . ID ABRECOLCH FECHACOLCH

    ID              shift and go to state 26


state 17

    (68) paramList -> paramSeq .

    FECHAPAREN      reduce using rule 68 (paramList -> paramSeq .)


state 18

    (69) paramList -> empty .

    FECHAPAREN      reduce using rule 69 (paramList -> empty .)


state 19

    (70) paramSeq -> param . VIRGULA paramSeq
    (71) paramSeq -> param .

    VIRGULA         shift and go to state 27
    FECHAPAREN      reduce using rule 71 (paramSeq -> param .)


state 20

    (4) dec -> type ID ABREPAREN . paramList FECHAPAREN ABRECHAVE block FECHACHAVE
    (68) paramList -> . paramSeq
    (69) paramList -> . empty
    (70) paramSeq -> . param VIRGULA paramSeq
    (71) paramSeq -> . param
    (86) empty -> .
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    FECHAPAREN      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 16
    paramList                      shift and go to state 28
    empty                          shift and go to state 18
    paramSeq                       shift and go to state 17
    param                          shift and go to state 19

state 21

    (8) varSpec -> ID ABRECOLCH . NUMBER FECHACOLCH
    (9) varSpec -> ID ABRECOLCH . NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    NUMBER          shift and go to state 29


state 22

    (7) varSpec -> ID ATRIB . literal
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE

    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31

    literal                        shift and go to state 34

state 23

    (74) varSpecSeq -> varSpec VIRGULA . varSpecSeq
    (74) varSpecSeq -> . varSpec VIRGULA varSpecSeq
    (75) varSpecSeq -> . varSpec
    (6) varSpec -> . ID
    (7) varSpec -> . ID ATRIB literal
    (8) varSpec -> . ID ABRECOLCH NUMBER FECHACOLCH
    (9) varSpec -> . ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    ID              shift and go to state 35

    varSpecSeq                     shift and go to state 36
    varSpec                        shift and go to state 13

state 24

    (5) varDec -> type varSpecSeq PONTOVIRGULA .

    INT             reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    STRING          reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    BOOL            reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    IF              reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    WHILE           reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    FOR             reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    BREAK           reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    RETURN          reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    READ            reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    WRITE           reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    ID              reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)
    $end            reduce using rule 5 (varDec -> type varSpecSeq PONTOVIRGULA .)


state 25

    (3) dec -> ID ABREPAREN paramList FECHAPAREN . ABRECHAVE block FECHACHAVE

    ABRECHAVE       shift and go to state 37


state 26

    (13) param -> type ID .
    (14) param -> type ID . ABRECOLCH FECHACOLCH

    MAIS            reduce using rule 13 (param -> type ID .)
    MENOS           reduce using rule 13 (param -> type ID .)
    MULT            reduce using rule 13 (param -> type ID .)
    DIV             reduce using rule 13 (param -> type ID .)
    MOD             reduce using rule 13 (param -> type ID .)
    IGUAL           reduce using rule 13 (param -> type ID .)
    DIFERENTE       reduce using rule 13 (param -> type ID .)
    MENORIGUAL      reduce using rule 13 (param -> type ID .)
    MAIORIGUAL      reduce using rule 13 (param -> type ID .)
    MAIOR           reduce using rule 13 (param -> type ID .)
    MENOR           reduce using rule 13 (param -> type ID .)
    E               reduce using rule 13 (param -> type ID .)
    OU              reduce using rule 13 (param -> type ID .)
    TERNARIOSE      reduce using rule 13 (param -> type ID .)
    PONTOVIRGULA    reduce using rule 13 (param -> type ID .)
    FECHAPAREN      reduce using rule 13 (param -> type ID .)
    VIRGULA         reduce using rule 13 (param -> type ID .)
    FECHACOLCH      reduce using rule 13 (param -> type ID .)
    TERNARIOSENAO   reduce using rule 13 (param -> type ID .)
    ABRECOLCH       shift and go to state 38


state 27

    (70) paramSeq -> param VIRGULA . paramSeq
    (70) paramSeq -> . param VIRGULA paramSeq
    (71) paramSeq -> . param
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    param                          shift and go to state 19
    paramSeq                       shift and go to state 39
    type                           shift and go to state 16

state 28

    (4) dec -> type ID ABREPAREN paramList . FECHAPAREN ABRECHAVE block FECHACHAVE

    FECHAPAREN      shift and go to state 40


state 29

    (8) varSpec -> ID ABRECOLCH NUMBER . FECHACOLCH
    (9) varSpec -> ID ABRECOLCH NUMBER . FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    FECHACOLCH      shift and go to state 41


state 30

    (64) literal -> NUMBER .

    MAIS            reduce using rule 64 (literal -> NUMBER .)
    MENOS           reduce using rule 64 (literal -> NUMBER .)
    MULT            reduce using rule 64 (literal -> NUMBER .)
    DIV             reduce using rule 64 (literal -> NUMBER .)
    MOD             reduce using rule 64 (literal -> NUMBER .)
    IGUAL           reduce using rule 64 (literal -> NUMBER .)
    DIFERENTE       reduce using rule 64 (literal -> NUMBER .)
    MENORIGUAL      reduce using rule 64 (literal -> NUMBER .)
    MAIORIGUAL      reduce using rule 64 (literal -> NUMBER .)
    MAIOR           reduce using rule 64 (literal -> NUMBER .)
    MENOR           reduce using rule 64 (literal -> NUMBER .)
    E               reduce using rule 64 (literal -> NUMBER .)
    OU              reduce using rule 64 (literal -> NUMBER .)
    TERNARIOSE      reduce using rule 64 (literal -> NUMBER .)
    VIRGULA         reduce using rule 64 (literal -> NUMBER .)
    PONTOVIRGULA    reduce using rule 64 (literal -> NUMBER .)
    FECHAPAREN      reduce using rule 64 (literal -> NUMBER .)
    FECHACOLCH      reduce using rule 64 (literal -> NUMBER .)
    TERNARIOSENAO   reduce using rule 64 (literal -> NUMBER .)
    FECHACHAVE      reduce using rule 64 (literal -> NUMBER .)


state 31

    (67) literal -> FALSE .

    MAIS            reduce using rule 67 (literal -> FALSE .)
    MENOS           reduce using rule 67 (literal -> FALSE .)
    MULT            reduce using rule 67 (literal -> FALSE .)
    DIV             reduce using rule 67 (literal -> FALSE .)
    MOD             reduce using rule 67 (literal -> FALSE .)
    IGUAL           reduce using rule 67 (literal -> FALSE .)
    DIFERENTE       reduce using rule 67 (literal -> FALSE .)
    MENORIGUAL      reduce using rule 67 (literal -> FALSE .)
    MAIORIGUAL      reduce using rule 67 (literal -> FALSE .)
    MAIOR           reduce using rule 67 (literal -> FALSE .)
    MENOR           reduce using rule 67 (literal -> FALSE .)
    E               reduce using rule 67 (literal -> FALSE .)
    OU              reduce using rule 67 (literal -> FALSE .)
    TERNARIOSE      reduce using rule 67 (literal -> FALSE .)
    VIRGULA         reduce using rule 67 (literal -> FALSE .)
    PONTOVIRGULA    reduce using rule 67 (literal -> FALSE .)
    FECHAPAREN      reduce using rule 67 (literal -> FALSE .)
    FECHACOLCH      reduce using rule 67 (literal -> FALSE .)
    TERNARIOSENAO   reduce using rule 67 (literal -> FALSE .)
    FECHACHAVE      reduce using rule 67 (literal -> FALSE .)


state 32

    (66) literal -> TRUE .

    MAIS            reduce using rule 66 (literal -> TRUE .)
    MENOS           reduce using rule 66 (literal -> TRUE .)
    MULT            reduce using rule 66 (literal -> TRUE .)
    DIV             reduce using rule 66 (literal -> TRUE .)
    MOD             reduce using rule 66 (literal -> TRUE .)
    IGUAL           reduce using rule 66 (literal -> TRUE .)
    DIFERENTE       reduce using rule 66 (literal -> TRUE .)
    MENORIGUAL      reduce using rule 66 (literal -> TRUE .)
    MAIORIGUAL      reduce using rule 66 (literal -> TRUE .)
    MAIOR           reduce using rule 66 (literal -> TRUE .)
    MENOR           reduce using rule 66 (literal -> TRUE .)
    E               reduce using rule 66 (literal -> TRUE .)
    OU              reduce using rule 66 (literal -> TRUE .)
    TERNARIOSE      reduce using rule 66 (literal -> TRUE .)
    VIRGULA         reduce using rule 66 (literal -> TRUE .)
    PONTOVIRGULA    reduce using rule 66 (literal -> TRUE .)
    FECHAPAREN      reduce using rule 66 (literal -> TRUE .)
    FECHACOLCH      reduce using rule 66 (literal -> TRUE .)
    TERNARIOSENAO   reduce using rule 66 (literal -> TRUE .)
    FECHACHAVE      reduce using rule 66 (literal -> TRUE .)


state 33

    (65) literal -> CADEIA .

    MAIS            reduce using rule 65 (literal -> CADEIA .)
    MENOS           reduce using rule 65 (literal -> CADEIA .)
    MULT            reduce using rule 65 (literal -> CADEIA .)
    DIV             reduce using rule 65 (literal -> CADEIA .)
    MOD             reduce using rule 65 (literal -> CADEIA .)
    IGUAL           reduce using rule 65 (literal -> CADEIA .)
    DIFERENTE       reduce using rule 65 (literal -> CADEIA .)
    MENORIGUAL      reduce using rule 65 (literal -> CADEIA .)
    MAIORIGUAL      reduce using rule 65 (literal -> CADEIA .)
    MAIOR           reduce using rule 65 (literal -> CADEIA .)
    MENOR           reduce using rule 65 (literal -> CADEIA .)
    E               reduce using rule 65 (literal -> CADEIA .)
    OU              reduce using rule 65 (literal -> CADEIA .)
    TERNARIOSE      reduce using rule 65 (literal -> CADEIA .)
    VIRGULA         reduce using rule 65 (literal -> CADEIA .)
    PONTOVIRGULA    reduce using rule 65 (literal -> CADEIA .)
    FECHAPAREN      reduce using rule 65 (literal -> CADEIA .)
    FECHACOLCH      reduce using rule 65 (literal -> CADEIA .)
    TERNARIOSENAO   reduce using rule 65 (literal -> CADEIA .)
    FECHACHAVE      reduce using rule 65 (literal -> CADEIA .)


state 34

    (7) varSpec -> ID ATRIB literal .

    VIRGULA         reduce using rule 7 (varSpec -> ID ATRIB literal .)
    PONTOVIRGULA    reduce using rule 7 (varSpec -> ID ATRIB literal .)


state 35

    (6) varSpec -> ID .
    (7) varSpec -> ID . ATRIB literal
    (8) varSpec -> ID . ABRECOLCH NUMBER FECHACOLCH
    (9) varSpec -> ID . ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    VIRGULA         reduce using rule 6 (varSpec -> ID .)
    PONTOVIRGULA    reduce using rule 6 (varSpec -> ID .)
    ATRIB           shift and go to state 22
    ABRECOLCH       shift and go to state 21


state 36

    (74) varSpecSeq -> varSpec VIRGULA varSpecSeq .

    PONTOVIRGULA    reduce using rule 74 (varSpecSeq -> varSpec VIRGULA varSpecSeq .)


state 37

    (3) dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE . block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    block                          shift and go to state 45
    varDecList                     shift and go to state 46

state 38

    (14) param -> type ID ABRECOLCH . FECHACOLCH

    FECHACOLCH      shift and go to state 47


state 39

    (70) paramSeq -> param VIRGULA paramSeq .

    FECHAPAREN      reduce using rule 70 (paramSeq -> param VIRGULA paramSeq .)


state 40

    (4) dec -> type ID ABREPAREN paramList FECHAPAREN . ABRECHAVE block FECHACHAVE

    ABRECHAVE       shift and go to state 48


state 41

    (8) varSpec -> ID ABRECOLCH NUMBER FECHACOLCH .
    (9) varSpec -> ID ABRECOLCH NUMBER FECHACOLCH . ATRIB ABRECHAVE literalSeq FECHACHAVE

    VIRGULA         reduce using rule 8 (varSpec -> ID ABRECOLCH NUMBER FECHACOLCH .)
    PONTOVIRGULA    reduce using rule 8 (varSpec -> ID ABRECOLCH NUMBER FECHACOLCH .)
    ATRIB           shift and go to state 49


state 42

    (72) varDecList -> varDec . varDecList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    varDecList                     shift and go to state 50
    empty                          shift and go to state 44
    varDec                         shift and go to state 42

state 43

    (5) varDec -> type . varSpecSeq PONTOVIRGULA
    (74) varSpecSeq -> . varSpec VIRGULA varSpecSeq
    (75) varSpecSeq -> . varSpec
    (6) varSpec -> . ID
    (7) varSpec -> . ID ATRIB literal
    (8) varSpec -> . ID ABRECOLCH NUMBER FECHACOLCH
    (9) varSpec -> . ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE

    ID              shift and go to state 35

    varSpec                        shift and go to state 13
    varSpecSeq                     shift and go to state 14

state 44

    (73) varDecList -> empty .

    IF              reduce using rule 73 (varDecList -> empty .)
    WHILE           reduce using rule 73 (varDecList -> empty .)
    FOR             reduce using rule 73 (varDecList -> empty .)
    BREAK           reduce using rule 73 (varDecList -> empty .)
    RETURN          reduce using rule 73 (varDecList -> empty .)
    READ            reduce using rule 73 (varDecList -> empty .)
    WRITE           reduce using rule 73 (varDecList -> empty .)
    ID              reduce using rule 73 (varDecList -> empty .)
    FECHACHAVE      reduce using rule 73 (varDecList -> empty .)


state 45

    (3) dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block . FECHACHAVE

    FECHACHAVE      shift and go to state 51


state 46

    (15) block -> varDecList . stmtList
    (80) stmtList -> . stmt stmtList
    (81) stmtList -> . empty
    (16) stmt -> . ifStmt
    (17) stmt -> . whileStmt
    (18) stmt -> . forStmt
    (19) stmt -> . breakStmt
    (20) stmt -> . returnStmt
    (21) stmt -> . readStmt
    (22) stmt -> . writeStmt
    (23) stmt -> . assign PONTOVIRGULA
    (24) stmt -> . subCall PONTOVIRGULA
    (86) empty -> .
    (25) ifStmt -> . IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (26) ifStmt -> . IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE
    (27) whileStmt -> . WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (28) forStmt -> . FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE
    (29) breakStmt -> . BREAK PONTOVIRGULA
    (32) returnStmt -> . RETURN PONTOVIRGULA
    (33) returnStmt -> . RETURN exp PONTOVIRGULA
    (30) readStmt -> . READ var PONTOVIRGULA
    (31) writeStmt -> . WRITE expList PONTOVIRGULA
    (35) assign -> . var ATRIB exp
    (36) assign -> . var MAISATRIB exp
    (37) assign -> . var MENOSATRIB exp
    (38) assign -> . var MULTATRIB exp
    (39) assign -> . var DIVATRIB exp
    (40) assign -> . var MODATRIB exp
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH

    FECHACHAVE      reduce using rule 86 (empty -> .)
    IF              shift and go to state 67
    WHILE           shift and go to state 54
    FOR             shift and go to state 52
    BREAK           shift and go to state 64
    RETURN          shift and go to state 61
    READ            shift and go to state 60
    WRITE           shift and go to state 59
    ID              shift and go to state 71

    ifStmt                         shift and go to state 62
    forStmt                        shift and go to state 53
    stmt                           shift and go to state 68
    assign                         shift and go to state 55
    breakStmt                      shift and go to state 65
    subCall                        shift and go to state 66
    returnStmt                     shift and go to state 63
    writeStmt                      shift and go to state 56
    empty                          shift and go to state 69
    readStmt                       shift and go to state 70
    var                            shift and go to state 57
    stmtList                       shift and go to state 58
    whileStmt                      shift and go to state 72

state 47

    (14) param -> type ID ABRECOLCH FECHACOLCH .

    MAIS            reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MENOS           reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MULT            reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    DIV             reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MOD             reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    IGUAL           reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    DIFERENTE       reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MENORIGUAL      reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MAIORIGUAL      reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MAIOR           reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    MENOR           reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    E               reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    OU              reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    TERNARIOSE      reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    PONTOVIRGULA    reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    FECHAPAREN      reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    VIRGULA         reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    FECHACOLCH      reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)
    TERNARIOSENAO   reduce using rule 14 (param -> type ID ABRECOLCH FECHACOLCH .)


state 48

    (4) dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE . block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    varDecList                     shift and go to state 46
    block                          shift and go to state 73

state 49

    (9) varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB . ABRECHAVE literalSeq FECHACHAVE

    ABRECHAVE       shift and go to state 74


state 50

    (72) varDecList -> varDec varDecList .

    IF              reduce using rule 72 (varDecList -> varDec varDecList .)
    WHILE           reduce using rule 72 (varDecList -> varDec varDecList .)
    FOR             reduce using rule 72 (varDecList -> varDec varDecList .)
    BREAK           reduce using rule 72 (varDecList -> varDec varDecList .)
    RETURN          reduce using rule 72 (varDecList -> varDec varDecList .)
    READ            reduce using rule 72 (varDecList -> varDec varDecList .)
    WRITE           reduce using rule 72 (varDecList -> varDec varDecList .)
    ID              reduce using rule 72 (varDecList -> varDec varDecList .)
    FECHACHAVE      reduce using rule 72 (varDecList -> varDec varDecList .)


state 51

    (3) dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .

    ID              reduce using rule 3 (dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    INT             reduce using rule 3 (dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    STRING          reduce using rule 3 (dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    BOOL            reduce using rule 3 (dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    $end            reduce using rule 3 (dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)


state 52

    (28) forStmt -> FOR . ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE

    ABREPAREN       shift and go to state 75


state 53

    (18) stmt -> forStmt .

    IF              reduce using rule 18 (stmt -> forStmt .)
    WHILE           reduce using rule 18 (stmt -> forStmt .)
    FOR             reduce using rule 18 (stmt -> forStmt .)
    BREAK           reduce using rule 18 (stmt -> forStmt .)
    RETURN          reduce using rule 18 (stmt -> forStmt .)
    READ            reduce using rule 18 (stmt -> forStmt .)
    WRITE           reduce using rule 18 (stmt -> forStmt .)
    ID              reduce using rule 18 (stmt -> forStmt .)
    FECHACHAVE      reduce using rule 18 (stmt -> forStmt .)


state 54

    (27) whileStmt -> WHILE . ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE

    ABREPAREN       shift and go to state 76


state 55

    (23) stmt -> assign . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 77


state 56

    (22) stmt -> writeStmt .

    IF              reduce using rule 22 (stmt -> writeStmt .)
    WHILE           reduce using rule 22 (stmt -> writeStmt .)
    FOR             reduce using rule 22 (stmt -> writeStmt .)
    BREAK           reduce using rule 22 (stmt -> writeStmt .)
    RETURN          reduce using rule 22 (stmt -> writeStmt .)
    READ            reduce using rule 22 (stmt -> writeStmt .)
    WRITE           reduce using rule 22 (stmt -> writeStmt .)
    ID              reduce using rule 22 (stmt -> writeStmt .)
    FECHACHAVE      reduce using rule 22 (stmt -> writeStmt .)


state 57

    (35) assign -> var . ATRIB exp
    (36) assign -> var . MAISATRIB exp
    (37) assign -> var . MENOSATRIB exp
    (38) assign -> var . MULTATRIB exp
    (39) assign -> var . DIVATRIB exp
    (40) assign -> var . MODATRIB exp

    ATRIB           shift and go to state 80
    MAISATRIB       shift and go to state 83
    MENOSATRIB      shift and go to state 78
    MULTATRIB       shift and go to state 81
    DIVATRIB        shift and go to state 82
    MODATRIB        shift and go to state 79


state 58

    (15) block -> varDecList stmtList .

    FECHACHAVE      reduce using rule 15 (block -> varDecList stmtList .)


state 59

    (31) writeStmt -> WRITE . expList PONTOVIRGULA
    (76) expList -> . expSeq
    (77) expList -> . empty
    (84) expSeq -> . exp VIRGULA expSeq
    (85) expSeq -> . exp
    (86) empty -> .
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    PONTOVIRGULA    reduce using rule 86 (empty -> .)
    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    expSeq                         shift and go to state 88
    exp                            shift and go to state 90
    param                          shift and go to state 94
    literal                        shift and go to state 86
    expList                        shift and go to state 87
    empty                          shift and go to state 92

state 60

    (30) readStmt -> READ . var PONTOVIRGULA
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH

    ID              shift and go to state 95

    var                            shift and go to state 96

state 61

    (32) returnStmt -> RETURN . PONTOVIRGULA
    (33) returnStmt -> RETURN . exp PONTOVIRGULA
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    PONTOVIRGULA    shift and go to state 97
    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 98
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 62

    (16) stmt -> ifStmt .

    IF              reduce using rule 16 (stmt -> ifStmt .)
    WHILE           reduce using rule 16 (stmt -> ifStmt .)
    FOR             reduce using rule 16 (stmt -> ifStmt .)
    BREAK           reduce using rule 16 (stmt -> ifStmt .)
    RETURN          reduce using rule 16 (stmt -> ifStmt .)
    READ            reduce using rule 16 (stmt -> ifStmt .)
    WRITE           reduce using rule 16 (stmt -> ifStmt .)
    ID              reduce using rule 16 (stmt -> ifStmt .)
    FECHACHAVE      reduce using rule 16 (stmt -> ifStmt .)


state 63

    (20) stmt -> returnStmt .

    IF              reduce using rule 20 (stmt -> returnStmt .)
    WHILE           reduce using rule 20 (stmt -> returnStmt .)
    FOR             reduce using rule 20 (stmt -> returnStmt .)
    BREAK           reduce using rule 20 (stmt -> returnStmt .)
    RETURN          reduce using rule 20 (stmt -> returnStmt .)
    READ            reduce using rule 20 (stmt -> returnStmt .)
    WRITE           reduce using rule 20 (stmt -> returnStmt .)
    ID              reduce using rule 20 (stmt -> returnStmt .)
    FECHACHAVE      reduce using rule 20 (stmt -> returnStmt .)


state 64

    (29) breakStmt -> BREAK . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 99


state 65

    (19) stmt -> breakStmt .

    IF              reduce using rule 19 (stmt -> breakStmt .)
    WHILE           reduce using rule 19 (stmt -> breakStmt .)
    FOR             reduce using rule 19 (stmt -> breakStmt .)
    BREAK           reduce using rule 19 (stmt -> breakStmt .)
    RETURN          reduce using rule 19 (stmt -> breakStmt .)
    READ            reduce using rule 19 (stmt -> breakStmt .)
    WRITE           reduce using rule 19 (stmt -> breakStmt .)
    ID              reduce using rule 19 (stmt -> breakStmt .)
    FECHACHAVE      reduce using rule 19 (stmt -> breakStmt .)


state 66

    (24) stmt -> subCall . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 100


state 67

    (25) ifStmt -> IF . ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (26) ifStmt -> IF . ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE

    ABREPAREN       shift and go to state 101


state 68

    (80) stmtList -> stmt . stmtList
    (80) stmtList -> . stmt stmtList
    (81) stmtList -> . empty
    (16) stmt -> . ifStmt
    (17) stmt -> . whileStmt
    (18) stmt -> . forStmt
    (19) stmt -> . breakStmt
    (20) stmt -> . returnStmt
    (21) stmt -> . readStmt
    (22) stmt -> . writeStmt
    (23) stmt -> . assign PONTOVIRGULA
    (24) stmt -> . subCall PONTOVIRGULA
    (86) empty -> .
    (25) ifStmt -> . IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (26) ifStmt -> . IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE
    (27) whileStmt -> . WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (28) forStmt -> . FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE
    (29) breakStmt -> . BREAK PONTOVIRGULA
    (32) returnStmt -> . RETURN PONTOVIRGULA
    (33) returnStmt -> . RETURN exp PONTOVIRGULA
    (30) readStmt -> . READ var PONTOVIRGULA
    (31) writeStmt -> . WRITE expList PONTOVIRGULA
    (35) assign -> . var ATRIB exp
    (36) assign -> . var MAISATRIB exp
    (37) assign -> . var MENOSATRIB exp
    (38) assign -> . var MULTATRIB exp
    (39) assign -> . var DIVATRIB exp
    (40) assign -> . var MODATRIB exp
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH

    FECHACHAVE      reduce using rule 86 (empty -> .)
    IF              shift and go to state 67
    WHILE           shift and go to state 54
    FOR             shift and go to state 52
    BREAK           shift and go to state 64
    RETURN          shift and go to state 61
    READ            shift and go to state 60
    WRITE           shift and go to state 59
    ID              shift and go to state 71

    ifStmt                         shift and go to state 62
    forStmt                        shift and go to state 53
    stmt                           shift and go to state 68
    assign                         shift and go to state 55
    breakStmt                      shift and go to state 65
    subCall                        shift and go to state 66
    returnStmt                     shift and go to state 63
    writeStmt                      shift and go to state 56
    empty                          shift and go to state 69
    readStmt                       shift and go to state 70
    var                            shift and go to state 57
    stmtList                       shift and go to state 102
    whileStmt                      shift and go to state 72

state 69

    (81) stmtList -> empty .

    FECHACHAVE      reduce using rule 81 (stmtList -> empty .)


state 70

    (21) stmt -> readStmt .

    IF              reduce using rule 21 (stmt -> readStmt .)
    WHILE           reduce using rule 21 (stmt -> readStmt .)
    FOR             reduce using rule 21 (stmt -> readStmt .)
    BREAK           reduce using rule 21 (stmt -> readStmt .)
    RETURN          reduce using rule 21 (stmt -> readStmt .)
    READ            reduce using rule 21 (stmt -> readStmt .)
    WRITE           reduce using rule 21 (stmt -> readStmt .)
    ID              reduce using rule 21 (stmt -> readStmt .)
    FECHACHAVE      reduce using rule 21 (stmt -> readStmt .)


state 71

    (34) subCall -> ID . ABREPAREN expList FECHAPAREN
    (41) var -> ID .
    (42) var -> ID . ABRECOLCH exp FECHACOLCH

    ABREPAREN       shift and go to state 104
    MAIS            reduce using rule 41 (var -> ID .)
    MENOS           reduce using rule 41 (var -> ID .)
    MULT            reduce using rule 41 (var -> ID .)
    DIV             reduce using rule 41 (var -> ID .)
    MOD             reduce using rule 41 (var -> ID .)
    IGUAL           reduce using rule 41 (var -> ID .)
    DIFERENTE       reduce using rule 41 (var -> ID .)
    MENORIGUAL      reduce using rule 41 (var -> ID .)
    MAIORIGUAL      reduce using rule 41 (var -> ID .)
    MAIOR           reduce using rule 41 (var -> ID .)
    MENOR           reduce using rule 41 (var -> ID .)
    E               reduce using rule 41 (var -> ID .)
    OU              reduce using rule 41 (var -> ID .)
    TERNARIOSE      reduce using rule 41 (var -> ID .)
    PONTOVIRGULA    reduce using rule 41 (var -> ID .)
    FECHAPAREN      reduce using rule 41 (var -> ID .)
    VIRGULA         reduce using rule 41 (var -> ID .)
    FECHACOLCH      reduce using rule 41 (var -> ID .)
    TERNARIOSENAO   reduce using rule 41 (var -> ID .)
    ATRIB           reduce using rule 41 (var -> ID .)
    MAISATRIB       reduce using rule 41 (var -> ID .)
    MENOSATRIB      reduce using rule 41 (var -> ID .)
    MULTATRIB       reduce using rule 41 (var -> ID .)
    DIVATRIB        reduce using rule 41 (var -> ID .)
    MODATRIB        reduce using rule 41 (var -> ID .)
    ABRECOLCH       shift and go to state 103


state 72

    (17) stmt -> whileStmt .

    IF              reduce using rule 17 (stmt -> whileStmt .)
    WHILE           reduce using rule 17 (stmt -> whileStmt .)
    FOR             reduce using rule 17 (stmt -> whileStmt .)
    BREAK           reduce using rule 17 (stmt -> whileStmt .)
    RETURN          reduce using rule 17 (stmt -> whileStmt .)
    READ            reduce using rule 17 (stmt -> whileStmt .)
    WRITE           reduce using rule 17 (stmt -> whileStmt .)
    ID              reduce using rule 17 (stmt -> whileStmt .)
    FECHACHAVE      reduce using rule 17 (stmt -> whileStmt .)


state 73

    (4) dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block . FECHACHAVE

    FECHACHAVE      shift and go to state 105


state 74

    (9) varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE . literalSeq FECHACHAVE
    (78) literalSeq -> . literal VIRGULA literalSeq
    (79) literalSeq -> . literal
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE

    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31

    literalSeq                     shift and go to state 106
    literal                        shift and go to state 107

state 75

    (28) forStmt -> FOR ABREPAREN . assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE
    (35) assign -> . var ATRIB exp
    (36) assign -> . var MAISATRIB exp
    (37) assign -> . var MENOSATRIB exp
    (38) assign -> . var MULTATRIB exp
    (39) assign -> . var DIVATRIB exp
    (40) assign -> . var MODATRIB exp
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH

    ID              shift and go to state 95

    var                            shift and go to state 57
    assign                         shift and go to state 108

state 76

    (27) whileStmt -> WHILE ABREPAREN . exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 109
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 77

    (23) stmt -> assign PONTOVIRGULA .

    IF              reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    WHILE           reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    FOR             reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    BREAK           reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    RETURN          reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    READ            reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    WRITE           reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    ID              reduce using rule 23 (stmt -> assign PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 23 (stmt -> assign PONTOVIRGULA .)


state 78

    (37) assign -> var MENOSATRIB . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    exp                            shift and go to state 110
    type                           shift and go to state 16
    var                            shift and go to state 85
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 79

    (40) assign -> var MODATRIB . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    exp                            shift and go to state 111
    type                           shift and go to state 16
    var                            shift and go to state 85
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 80

    (35) assign -> var ATRIB . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    exp                            shift and go to state 112
    type                           shift and go to state 16
    var                            shift and go to state 85
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 81

    (38) assign -> var MULTATRIB . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    exp                            shift and go to state 113
    type                           shift and go to state 16
    var                            shift and go to state 85
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 82

    (39) assign -> var DIVATRIB . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    exp                            shift and go to state 114
    type                           shift and go to state 16
    var                            shift and go to state 85
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 83

    (36) assign -> var MAISATRIB . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    exp                            shift and go to state 115
    type                           shift and go to state 16
    var                            shift and go to state 85
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 84

    (57) exp -> SINAL . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 116
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 85

    (60) exp -> var .

    MAIS            reduce using rule 60 (exp -> var .)
    MENOS           reduce using rule 60 (exp -> var .)
    MULT            reduce using rule 60 (exp -> var .)
    DIV             reduce using rule 60 (exp -> var .)
    MOD             reduce using rule 60 (exp -> var .)
    IGUAL           reduce using rule 60 (exp -> var .)
    DIFERENTE       reduce using rule 60 (exp -> var .)
    MENORIGUAL      reduce using rule 60 (exp -> var .)
    MAIORIGUAL      reduce using rule 60 (exp -> var .)
    MAIOR           reduce using rule 60 (exp -> var .)
    MENOR           reduce using rule 60 (exp -> var .)
    E               reduce using rule 60 (exp -> var .)
    OU              reduce using rule 60 (exp -> var .)
    TERNARIOSE      reduce using rule 60 (exp -> var .)
    VIRGULA         reduce using rule 60 (exp -> var .)
    PONTOVIRGULA    reduce using rule 60 (exp -> var .)
    FECHAPAREN      reduce using rule 60 (exp -> var .)
    FECHACOLCH      reduce using rule 60 (exp -> var .)
    TERNARIOSENAO   reduce using rule 60 (exp -> var .)


state 86

    (61) exp -> literal .

    MAIS            reduce using rule 61 (exp -> literal .)
    MENOS           reduce using rule 61 (exp -> literal .)
    MULT            reduce using rule 61 (exp -> literal .)
    DIV             reduce using rule 61 (exp -> literal .)
    MOD             reduce using rule 61 (exp -> literal .)
    IGUAL           reduce using rule 61 (exp -> literal .)
    DIFERENTE       reduce using rule 61 (exp -> literal .)
    MENORIGUAL      reduce using rule 61 (exp -> literal .)
    MAIORIGUAL      reduce using rule 61 (exp -> literal .)
    MAIOR           reduce using rule 61 (exp -> literal .)
    MENOR           reduce using rule 61 (exp -> literal .)
    E               reduce using rule 61 (exp -> literal .)
    OU              reduce using rule 61 (exp -> literal .)
    TERNARIOSE      reduce using rule 61 (exp -> literal .)
    VIRGULA         reduce using rule 61 (exp -> literal .)
    PONTOVIRGULA    reduce using rule 61 (exp -> literal .)
    FECHAPAREN      reduce using rule 61 (exp -> literal .)
    FECHACOLCH      reduce using rule 61 (exp -> literal .)
    TERNARIOSENAO   reduce using rule 61 (exp -> literal .)


state 87

    (31) writeStmt -> WRITE expList . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 117


state 88

    (76) expList -> expSeq .

    PONTOVIRGULA    reduce using rule 76 (expList -> expSeq .)
    FECHAPAREN      reduce using rule 76 (expList -> expSeq .)


state 89

    (56) exp -> NEG . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 118
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 90

    (84) expSeq -> exp . VIRGULA expSeq
    (85) expSeq -> exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    VIRGULA         shift and go to state 127
    FECHAPAREN      reduce using rule 85 (expSeq -> exp .)
    PONTOVIRGULA    reduce using rule 85 (expSeq -> exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 91

    (59) exp -> subCall .

    MAIS            reduce using rule 59 (exp -> subCall .)
    MENOS           reduce using rule 59 (exp -> subCall .)
    MULT            reduce using rule 59 (exp -> subCall .)
    DIV             reduce using rule 59 (exp -> subCall .)
    MOD             reduce using rule 59 (exp -> subCall .)
    IGUAL           reduce using rule 59 (exp -> subCall .)
    DIFERENTE       reduce using rule 59 (exp -> subCall .)
    MENORIGUAL      reduce using rule 59 (exp -> subCall .)
    MAIORIGUAL      reduce using rule 59 (exp -> subCall .)
    MAIOR           reduce using rule 59 (exp -> subCall .)
    MENOR           reduce using rule 59 (exp -> subCall .)
    E               reduce using rule 59 (exp -> subCall .)
    OU              reduce using rule 59 (exp -> subCall .)
    TERNARIOSE      reduce using rule 59 (exp -> subCall .)
    VIRGULA         reduce using rule 59 (exp -> subCall .)
    PONTOVIRGULA    reduce using rule 59 (exp -> subCall .)
    FECHAPAREN      reduce using rule 59 (exp -> subCall .)
    FECHACOLCH      reduce using rule 59 (exp -> subCall .)
    TERNARIOSENAO   reduce using rule 59 (exp -> subCall .)


state 92

    (77) expList -> empty .

    PONTOVIRGULA    reduce using rule 77 (expList -> empty .)
    FECHAPAREN      reduce using rule 77 (expList -> empty .)


state 93

    (62) exp -> ABREPAREN . exp FECHAPAREN
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 134
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 94

    (63) exp -> param .

    MAIS            reduce using rule 63 (exp -> param .)
    MENOS           reduce using rule 63 (exp -> param .)
    MULT            reduce using rule 63 (exp -> param .)
    DIV             reduce using rule 63 (exp -> param .)
    MOD             reduce using rule 63 (exp -> param .)
    IGUAL           reduce using rule 63 (exp -> param .)
    DIFERENTE       reduce using rule 63 (exp -> param .)
    MENORIGUAL      reduce using rule 63 (exp -> param .)
    MAIORIGUAL      reduce using rule 63 (exp -> param .)
    MAIOR           reduce using rule 63 (exp -> param .)
    MENOR           reduce using rule 63 (exp -> param .)
    E               reduce using rule 63 (exp -> param .)
    OU              reduce using rule 63 (exp -> param .)
    TERNARIOSE      reduce using rule 63 (exp -> param .)
    VIRGULA         reduce using rule 63 (exp -> param .)
    PONTOVIRGULA    reduce using rule 63 (exp -> param .)
    FECHAPAREN      reduce using rule 63 (exp -> param .)
    FECHACOLCH      reduce using rule 63 (exp -> param .)
    TERNARIOSENAO   reduce using rule 63 (exp -> param .)


state 95

    (41) var -> ID .
    (42) var -> ID . ABRECOLCH exp FECHACOLCH

    ATRIB           reduce using rule 41 (var -> ID .)
    MAISATRIB       reduce using rule 41 (var -> ID .)
    MENOSATRIB      reduce using rule 41 (var -> ID .)
    MULTATRIB       reduce using rule 41 (var -> ID .)
    DIVATRIB        reduce using rule 41 (var -> ID .)
    MODATRIB        reduce using rule 41 (var -> ID .)
    PONTOVIRGULA    reduce using rule 41 (var -> ID .)
    ABRECOLCH       shift and go to state 103


state 96

    (30) readStmt -> READ var . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 135


state 97

    (32) returnStmt -> RETURN PONTOVIRGULA .

    IF              reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    WHILE           reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    FOR             reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    BREAK           reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    RETURN          reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    READ            reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    WRITE           reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    ID              reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 32 (returnStmt -> RETURN PONTOVIRGULA .)


state 98

    (33) returnStmt -> RETURN exp . PONTOVIRGULA
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    shift and go to state 136
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 99

    (29) breakStmt -> BREAK PONTOVIRGULA .

    IF              reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    WHILE           reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    FOR             reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    BREAK           reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    RETURN          reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    READ            reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    WRITE           reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    ID              reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 29 (breakStmt -> BREAK PONTOVIRGULA .)


state 100

    (24) stmt -> subCall PONTOVIRGULA .

    IF              reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    WHILE           reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    FOR             reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    BREAK           reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    RETURN          reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    READ            reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    WRITE           reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    ID              reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 24 (stmt -> subCall PONTOVIRGULA .)


state 101

    (25) ifStmt -> IF ABREPAREN . exp FECHAPAREN ABRECHAVE block FECHACHAVE
    (26) ifStmt -> IF ABREPAREN . exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 137
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 102

    (80) stmtList -> stmt stmtList .

    FECHACHAVE      reduce using rule 80 (stmtList -> stmt stmtList .)


state 103

    (42) var -> ID ABRECOLCH . exp FECHACOLCH
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 138
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 104

    (34) subCall -> ID ABREPAREN . expList FECHAPAREN
    (76) expList -> . expSeq
    (77) expList -> . empty
    (84) expSeq -> . exp VIRGULA expSeq
    (85) expSeq -> . exp
    (86) empty -> .
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    FECHAPAREN      reduce using rule 86 (empty -> .)
    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    expSeq                         shift and go to state 88
    exp                            shift and go to state 90
    param                          shift and go to state 94
    literal                        shift and go to state 86
    expList                        shift and go to state 139
    empty                          shift and go to state 92

state 105

    (4) dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .

    ID              reduce using rule 4 (dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    INT             reduce using rule 4 (dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    STRING          reduce using rule 4 (dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    BOOL            reduce using rule 4 (dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)
    $end            reduce using rule 4 (dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE .)


state 106

    (9) varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq . FECHACHAVE

    FECHACHAVE      shift and go to state 140


state 107

    (78) literalSeq -> literal . VIRGULA literalSeq
    (79) literalSeq -> literal .

    VIRGULA         shift and go to state 141
    FECHACHAVE      reduce using rule 79 (literalSeq -> literal .)


state 108

    (28) forStmt -> FOR ABREPAREN assign . PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE

    PONTOVIRGULA    shift and go to state 142


state 109

    (27) whileStmt -> WHILE ABREPAREN exp . FECHAPAREN ABRECHAVE block FECHACHAVE
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    FECHAPAREN      shift and go to state 143
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 110

    (37) assign -> var MENOSATRIB exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    reduce using rule 37 (assign -> var MENOSATRIB exp .)
    FECHAPAREN      reduce using rule 37 (assign -> var MENOSATRIB exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 111

    (40) assign -> var MODATRIB exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    reduce using rule 40 (assign -> var MODATRIB exp .)
    FECHAPAREN      reduce using rule 40 (assign -> var MODATRIB exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 112

    (35) assign -> var ATRIB exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    reduce using rule 35 (assign -> var ATRIB exp .)
    FECHAPAREN      reduce using rule 35 (assign -> var ATRIB exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 113

    (38) assign -> var MULTATRIB exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    reduce using rule 38 (assign -> var MULTATRIB exp .)
    FECHAPAREN      reduce using rule 38 (assign -> var MULTATRIB exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 114

    (39) assign -> var DIVATRIB exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    reduce using rule 39 (assign -> var DIVATRIB exp .)
    FECHAPAREN      reduce using rule 39 (assign -> var DIVATRIB exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 115

    (36) assign -> var MAISATRIB exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    reduce using rule 36 (assign -> var MAISATRIB exp .)
    FECHAPAREN      reduce using rule 36 (assign -> var MAISATRIB exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 116

    (57) exp -> SINAL exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MAIS            reduce using rule 57 (exp -> SINAL exp .)
    MENOS           reduce using rule 57 (exp -> SINAL exp .)
    MULT            reduce using rule 57 (exp -> SINAL exp .)
    DIV             reduce using rule 57 (exp -> SINAL exp .)
    MOD             reduce using rule 57 (exp -> SINAL exp .)
    IGUAL           reduce using rule 57 (exp -> SINAL exp .)
    DIFERENTE       reduce using rule 57 (exp -> SINAL exp .)
    MENORIGUAL      reduce using rule 57 (exp -> SINAL exp .)
    MAIORIGUAL      reduce using rule 57 (exp -> SINAL exp .)
    MAIOR           reduce using rule 57 (exp -> SINAL exp .)
    MENOR           reduce using rule 57 (exp -> SINAL exp .)
    E               reduce using rule 57 (exp -> SINAL exp .)
    OU              reduce using rule 57 (exp -> SINAL exp .)
    TERNARIOSE      reduce using rule 57 (exp -> SINAL exp .)
    VIRGULA         reduce using rule 57 (exp -> SINAL exp .)
    PONTOVIRGULA    reduce using rule 57 (exp -> SINAL exp .)
    FECHAPAREN      reduce using rule 57 (exp -> SINAL exp .)
    FECHACOLCH      reduce using rule 57 (exp -> SINAL exp .)
    TERNARIOSENAO   reduce using rule 57 (exp -> SINAL exp .)

  ! MAIS            [ shift and go to state 119 ]
  ! MENOS           [ shift and go to state 120 ]
  ! MULT            [ shift and go to state 122 ]
  ! DIV             [ shift and go to state 125 ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 117

    (31) writeStmt -> WRITE expList PONTOVIRGULA .

    IF              reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    WHILE           reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    FOR             reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    BREAK           reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    RETURN          reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    READ            reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    WRITE           reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    ID              reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 31 (writeStmt -> WRITE expList PONTOVIRGULA .)


state 118

    (56) exp -> NEG exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MAIS            reduce using rule 56 (exp -> NEG exp .)
    MENOS           reduce using rule 56 (exp -> NEG exp .)
    MULT            reduce using rule 56 (exp -> NEG exp .)
    DIV             reduce using rule 56 (exp -> NEG exp .)
    MOD             reduce using rule 56 (exp -> NEG exp .)
    IGUAL           reduce using rule 56 (exp -> NEG exp .)
    DIFERENTE       reduce using rule 56 (exp -> NEG exp .)
    MENORIGUAL      reduce using rule 56 (exp -> NEG exp .)
    MAIORIGUAL      reduce using rule 56 (exp -> NEG exp .)
    MAIOR           reduce using rule 56 (exp -> NEG exp .)
    MENOR           reduce using rule 56 (exp -> NEG exp .)
    E               reduce using rule 56 (exp -> NEG exp .)
    OU              reduce using rule 56 (exp -> NEG exp .)
    TERNARIOSE      reduce using rule 56 (exp -> NEG exp .)
    VIRGULA         reduce using rule 56 (exp -> NEG exp .)
    PONTOVIRGULA    reduce using rule 56 (exp -> NEG exp .)
    FECHAPAREN      reduce using rule 56 (exp -> NEG exp .)
    FECHACOLCH      reduce using rule 56 (exp -> NEG exp .)
    TERNARIOSENAO   reduce using rule 56 (exp -> NEG exp .)

  ! MAIS            [ shift and go to state 119 ]
  ! MENOS           [ shift and go to state 120 ]
  ! MULT            [ shift and go to state 122 ]
  ! DIV             [ shift and go to state 125 ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 119

    (43) exp -> exp MAIS . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 144
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 120

    (44) exp -> exp MENOS . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 145
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 121

    (48) exp -> exp IGUAL . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 146
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 122

    (45) exp -> exp MULT . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 147
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 123

    (53) exp -> exp MENOR . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 148
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 124

    (52) exp -> exp MAIOR . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 149
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 125

    (46) exp -> exp DIV . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 150
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 126

    (54) exp -> exp E . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 151
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 127

    (84) expSeq -> exp VIRGULA . expSeq
    (84) expSeq -> . exp VIRGULA expSeq
    (85) expSeq -> . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    expSeq                         shift and go to state 152
    exp                            shift and go to state 90
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 128

    (47) exp -> exp MOD . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 153
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 129

    (58) exp -> exp TERNARIOSE . exp TERNARIOSENAO exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 154
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 130

    (55) exp -> exp OU . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 155
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 131

    (51) exp -> exp MAIORIGUAL . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 156
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 132

    (49) exp -> exp DIFERENTE . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 157
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 133

    (50) exp -> exp MENORIGUAL . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 158
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 134

    (62) exp -> ABREPAREN exp . FECHAPAREN
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    FECHAPAREN      shift and go to state 159
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 135

    (30) readStmt -> READ var PONTOVIRGULA .

    IF              reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    WHILE           reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    FOR             reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    BREAK           reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    RETURN          reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    READ            reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    WRITE           reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    ID              reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 30 (readStmt -> READ var PONTOVIRGULA .)


state 136

    (33) returnStmt -> RETURN exp PONTOVIRGULA .

    IF              reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    WHILE           reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    FOR             reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    BREAK           reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    RETURN          reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    READ            reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    WRITE           reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    ID              reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)
    FECHACHAVE      reduce using rule 33 (returnStmt -> RETURN exp PONTOVIRGULA .)


state 137

    (25) ifStmt -> IF ABREPAREN exp . FECHAPAREN ABRECHAVE block FECHACHAVE
    (26) ifStmt -> IF ABREPAREN exp . FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    FECHAPAREN      shift and go to state 160
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 138

    (42) var -> ID ABRECOLCH exp . FECHACOLCH
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    FECHACOLCH      shift and go to state 161
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 139

    (34) subCall -> ID ABREPAREN expList . FECHAPAREN

    FECHAPAREN      shift and go to state 162


state 140

    (9) varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE .

    VIRGULA         reduce using rule 9 (varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE .)
    PONTOVIRGULA    reduce using rule 9 (varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE .)


state 141

    (78) literalSeq -> literal VIRGULA . literalSeq
    (78) literalSeq -> . literal VIRGULA literalSeq
    (79) literalSeq -> . literal
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE

    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31

    literalSeq                     shift and go to state 163
    literal                        shift and go to state 107

state 142

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA . exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 164
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 143

    (27) whileStmt -> WHILE ABREPAREN exp FECHAPAREN . ABRECHAVE block FECHACHAVE

    ABRECHAVE       shift and go to state 165


state 144

    (43) exp -> exp MAIS exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MAIS            reduce using rule 43 (exp -> exp MAIS exp .)
    MENOS           reduce using rule 43 (exp -> exp MAIS exp .)
    MOD             reduce using rule 43 (exp -> exp MAIS exp .)
    IGUAL           reduce using rule 43 (exp -> exp MAIS exp .)
    DIFERENTE       reduce using rule 43 (exp -> exp MAIS exp .)
    MENORIGUAL      reduce using rule 43 (exp -> exp MAIS exp .)
    MAIORIGUAL      reduce using rule 43 (exp -> exp MAIS exp .)
    MAIOR           reduce using rule 43 (exp -> exp MAIS exp .)
    MENOR           reduce using rule 43 (exp -> exp MAIS exp .)
    E               reduce using rule 43 (exp -> exp MAIS exp .)
    OU              reduce using rule 43 (exp -> exp MAIS exp .)
    TERNARIOSE      reduce using rule 43 (exp -> exp MAIS exp .)
    VIRGULA         reduce using rule 43 (exp -> exp MAIS exp .)
    PONTOVIRGULA    reduce using rule 43 (exp -> exp MAIS exp .)
    FECHAPAREN      reduce using rule 43 (exp -> exp MAIS exp .)
    FECHACOLCH      reduce using rule 43 (exp -> exp MAIS exp .)
    TERNARIOSENAO   reduce using rule 43 (exp -> exp MAIS exp .)
    MULT            shift and go to state 122
    DIV             shift and go to state 125

  ! MULT            [ reduce using rule 43 (exp -> exp MAIS exp .) ]
  ! DIV             [ reduce using rule 43 (exp -> exp MAIS exp .) ]
  ! MAIS            [ shift and go to state 119 ]
  ! MENOS           [ shift and go to state 120 ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 145

    (44) exp -> exp MENOS exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MAIS            reduce using rule 44 (exp -> exp MENOS exp .)
    MENOS           reduce using rule 44 (exp -> exp MENOS exp .)
    MOD             reduce using rule 44 (exp -> exp MENOS exp .)
    IGUAL           reduce using rule 44 (exp -> exp MENOS exp .)
    DIFERENTE       reduce using rule 44 (exp -> exp MENOS exp .)
    MENORIGUAL      reduce using rule 44 (exp -> exp MENOS exp .)
    MAIORIGUAL      reduce using rule 44 (exp -> exp MENOS exp .)
    MAIOR           reduce using rule 44 (exp -> exp MENOS exp .)
    MENOR           reduce using rule 44 (exp -> exp MENOS exp .)
    E               reduce using rule 44 (exp -> exp MENOS exp .)
    OU              reduce using rule 44 (exp -> exp MENOS exp .)
    TERNARIOSE      reduce using rule 44 (exp -> exp MENOS exp .)
    VIRGULA         reduce using rule 44 (exp -> exp MENOS exp .)
    PONTOVIRGULA    reduce using rule 44 (exp -> exp MENOS exp .)
    FECHAPAREN      reduce using rule 44 (exp -> exp MENOS exp .)
    FECHACOLCH      reduce using rule 44 (exp -> exp MENOS exp .)
    TERNARIOSENAO   reduce using rule 44 (exp -> exp MENOS exp .)
    MULT            shift and go to state 122
    DIV             shift and go to state 125

  ! MULT            [ reduce using rule 44 (exp -> exp MENOS exp .) ]
  ! DIV             [ reduce using rule 44 (exp -> exp MENOS exp .) ]
  ! MAIS            [ shift and go to state 119 ]
  ! MENOS           [ shift and go to state 120 ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 146

    (48) exp -> exp IGUAL exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 48 (exp -> exp IGUAL exp .)
    IGUAL           reduce using rule 48 (exp -> exp IGUAL exp .)
    DIFERENTE       reduce using rule 48 (exp -> exp IGUAL exp .)
    E               reduce using rule 48 (exp -> exp IGUAL exp .)
    OU              reduce using rule 48 (exp -> exp IGUAL exp .)
    TERNARIOSE      reduce using rule 48 (exp -> exp IGUAL exp .)
    VIRGULA         reduce using rule 48 (exp -> exp IGUAL exp .)
    PONTOVIRGULA    reduce using rule 48 (exp -> exp IGUAL exp .)
    FECHAPAREN      reduce using rule 48 (exp -> exp IGUAL exp .)
    FECHACOLCH      reduce using rule 48 (exp -> exp IGUAL exp .)
    TERNARIOSENAO   reduce using rule 48 (exp -> exp IGUAL exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123

  ! MAIS            [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MENOS           [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MULT            [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MENORIGUAL      [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MAIORIGUAL      [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MAIOR           [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MENOR           [ reduce using rule 48 (exp -> exp IGUAL exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 147

    (45) exp -> exp MULT exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MAIS            reduce using rule 45 (exp -> exp MULT exp .)
    MENOS           reduce using rule 45 (exp -> exp MULT exp .)
    MULT            reduce using rule 45 (exp -> exp MULT exp .)
    DIV             reduce using rule 45 (exp -> exp MULT exp .)
    MOD             reduce using rule 45 (exp -> exp MULT exp .)
    IGUAL           reduce using rule 45 (exp -> exp MULT exp .)
    DIFERENTE       reduce using rule 45 (exp -> exp MULT exp .)
    MENORIGUAL      reduce using rule 45 (exp -> exp MULT exp .)
    MAIORIGUAL      reduce using rule 45 (exp -> exp MULT exp .)
    MAIOR           reduce using rule 45 (exp -> exp MULT exp .)
    MENOR           reduce using rule 45 (exp -> exp MULT exp .)
    E               reduce using rule 45 (exp -> exp MULT exp .)
    OU              reduce using rule 45 (exp -> exp MULT exp .)
    TERNARIOSE      reduce using rule 45 (exp -> exp MULT exp .)
    VIRGULA         reduce using rule 45 (exp -> exp MULT exp .)
    PONTOVIRGULA    reduce using rule 45 (exp -> exp MULT exp .)
    FECHAPAREN      reduce using rule 45 (exp -> exp MULT exp .)
    FECHACOLCH      reduce using rule 45 (exp -> exp MULT exp .)
    TERNARIOSENAO   reduce using rule 45 (exp -> exp MULT exp .)

  ! MAIS            [ shift and go to state 119 ]
  ! MENOS           [ shift and go to state 120 ]
  ! MULT            [ shift and go to state 122 ]
  ! DIV             [ shift and go to state 125 ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 148

    (53) exp -> exp MENOR exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 53 (exp -> exp MENOR exp .)
    IGUAL           reduce using rule 53 (exp -> exp MENOR exp .)
    DIFERENTE       reduce using rule 53 (exp -> exp MENOR exp .)
    MENORIGUAL      reduce using rule 53 (exp -> exp MENOR exp .)
    MAIORIGUAL      reduce using rule 53 (exp -> exp MENOR exp .)
    MAIOR           reduce using rule 53 (exp -> exp MENOR exp .)
    MENOR           reduce using rule 53 (exp -> exp MENOR exp .)
    E               reduce using rule 53 (exp -> exp MENOR exp .)
    OU              reduce using rule 53 (exp -> exp MENOR exp .)
    TERNARIOSE      reduce using rule 53 (exp -> exp MENOR exp .)
    VIRGULA         reduce using rule 53 (exp -> exp MENOR exp .)
    PONTOVIRGULA    reduce using rule 53 (exp -> exp MENOR exp .)
    FECHAPAREN      reduce using rule 53 (exp -> exp MENOR exp .)
    FECHACOLCH      reduce using rule 53 (exp -> exp MENOR exp .)
    TERNARIOSENAO   reduce using rule 53 (exp -> exp MENOR exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125

  ! MAIS            [ reduce using rule 53 (exp -> exp MENOR exp .) ]
  ! MENOS           [ reduce using rule 53 (exp -> exp MENOR exp .) ]
  ! MULT            [ reduce using rule 53 (exp -> exp MENOR exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp MENOR exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 149

    (52) exp -> exp MAIOR exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 52 (exp -> exp MAIOR exp .)
    IGUAL           reduce using rule 52 (exp -> exp MAIOR exp .)
    DIFERENTE       reduce using rule 52 (exp -> exp MAIOR exp .)
    MENORIGUAL      reduce using rule 52 (exp -> exp MAIOR exp .)
    MAIORIGUAL      reduce using rule 52 (exp -> exp MAIOR exp .)
    MAIOR           reduce using rule 52 (exp -> exp MAIOR exp .)
    MENOR           reduce using rule 52 (exp -> exp MAIOR exp .)
    E               reduce using rule 52 (exp -> exp MAIOR exp .)
    OU              reduce using rule 52 (exp -> exp MAIOR exp .)
    TERNARIOSE      reduce using rule 52 (exp -> exp MAIOR exp .)
    VIRGULA         reduce using rule 52 (exp -> exp MAIOR exp .)
    PONTOVIRGULA    reduce using rule 52 (exp -> exp MAIOR exp .)
    FECHAPAREN      reduce using rule 52 (exp -> exp MAIOR exp .)
    FECHACOLCH      reduce using rule 52 (exp -> exp MAIOR exp .)
    TERNARIOSENAO   reduce using rule 52 (exp -> exp MAIOR exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125

  ! MAIS            [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! MENOS           [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! MULT            [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp MAIOR exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 150

    (46) exp -> exp DIV exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MAIS            reduce using rule 46 (exp -> exp DIV exp .)
    MENOS           reduce using rule 46 (exp -> exp DIV exp .)
    MULT            reduce using rule 46 (exp -> exp DIV exp .)
    DIV             reduce using rule 46 (exp -> exp DIV exp .)
    MOD             reduce using rule 46 (exp -> exp DIV exp .)
    IGUAL           reduce using rule 46 (exp -> exp DIV exp .)
    DIFERENTE       reduce using rule 46 (exp -> exp DIV exp .)
    MENORIGUAL      reduce using rule 46 (exp -> exp DIV exp .)
    MAIORIGUAL      reduce using rule 46 (exp -> exp DIV exp .)
    MAIOR           reduce using rule 46 (exp -> exp DIV exp .)
    MENOR           reduce using rule 46 (exp -> exp DIV exp .)
    E               reduce using rule 46 (exp -> exp DIV exp .)
    OU              reduce using rule 46 (exp -> exp DIV exp .)
    TERNARIOSE      reduce using rule 46 (exp -> exp DIV exp .)
    VIRGULA         reduce using rule 46 (exp -> exp DIV exp .)
    PONTOVIRGULA    reduce using rule 46 (exp -> exp DIV exp .)
    FECHAPAREN      reduce using rule 46 (exp -> exp DIV exp .)
    FECHACOLCH      reduce using rule 46 (exp -> exp DIV exp .)
    TERNARIOSENAO   reduce using rule 46 (exp -> exp DIV exp .)

  ! MAIS            [ shift and go to state 119 ]
  ! MENOS           [ shift and go to state 120 ]
  ! MULT            [ shift and go to state 122 ]
  ! DIV             [ shift and go to state 125 ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 151

    (54) exp -> exp E exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 54 (exp -> exp E exp .)
    E               reduce using rule 54 (exp -> exp E exp .)
    OU              reduce using rule 54 (exp -> exp E exp .)
    TERNARIOSE      reduce using rule 54 (exp -> exp E exp .)
    VIRGULA         reduce using rule 54 (exp -> exp E exp .)
    PONTOVIRGULA    reduce using rule 54 (exp -> exp E exp .)
    FECHAPAREN      reduce using rule 54 (exp -> exp E exp .)
    FECHACOLCH      reduce using rule 54 (exp -> exp E exp .)
    TERNARIOSENAO   reduce using rule 54 (exp -> exp E exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123

  ! MAIS            [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MENOS           [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MULT            [ reduce using rule 54 (exp -> exp E exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp E exp .) ]
  ! IGUAL           [ reduce using rule 54 (exp -> exp E exp .) ]
  ! DIFERENTE       [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MENORIGUAL      [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MAIORIGUAL      [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MAIOR           [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MENOR           [ reduce using rule 54 (exp -> exp E exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 152

    (84) expSeq -> exp VIRGULA expSeq .

    FECHAPAREN      reduce using rule 84 (expSeq -> exp VIRGULA expSeq .)
    PONTOVIRGULA    reduce using rule 84 (expSeq -> exp VIRGULA expSeq .)


state 153

    (47) exp -> exp MOD exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

  ! shift/reduce conflict for MAIS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for TERNARIOSE resolved as shift
    VIRGULA         reduce using rule 47 (exp -> exp MOD exp .)
    PONTOVIRGULA    reduce using rule 47 (exp -> exp MOD exp .)
    FECHAPAREN      reduce using rule 47 (exp -> exp MOD exp .)
    FECHACOLCH      reduce using rule 47 (exp -> exp MOD exp .)
    TERNARIOSENAO   reduce using rule 47 (exp -> exp MOD exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129

  ! MAIS            [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MENOS           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MULT            [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! IGUAL           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! DIFERENTE       [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MENORIGUAL      [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MAIORIGUAL      [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MAIOR           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! MENOR           [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! E               [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! OU              [ reduce using rule 47 (exp -> exp MOD exp .) ]
  ! TERNARIOSE      [ reduce using rule 47 (exp -> exp MOD exp .) ]


state 154

    (58) exp -> exp TERNARIOSE exp . TERNARIOSENAO exp
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    TERNARIOSENAO   shift and go to state 166
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 155

    (55) exp -> exp OU exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 55 (exp -> exp OU exp .)
    OU              reduce using rule 55 (exp -> exp OU exp .)
    TERNARIOSE      reduce using rule 55 (exp -> exp OU exp .)
    VIRGULA         reduce using rule 55 (exp -> exp OU exp .)
    PONTOVIRGULA    reduce using rule 55 (exp -> exp OU exp .)
    FECHAPAREN      reduce using rule 55 (exp -> exp OU exp .)
    FECHACOLCH      reduce using rule 55 (exp -> exp OU exp .)
    TERNARIOSENAO   reduce using rule 55 (exp -> exp OU exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126

  ! MAIS            [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MENOS           [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MULT            [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! IGUAL           [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! DIFERENTE       [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MENORIGUAL      [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MAIORIGUAL      [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MAIOR           [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MENOR           [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! E               [ reduce using rule 55 (exp -> exp OU exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 156

    (51) exp -> exp MAIORIGUAL exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    IGUAL           reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    DIFERENTE       reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    MENORIGUAL      reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    MAIORIGUAL      reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    MAIOR           reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    MENOR           reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    E               reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    OU              reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    TERNARIOSE      reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    VIRGULA         reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    PONTOVIRGULA    reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    FECHAPAREN      reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    FECHACOLCH      reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    TERNARIOSENAO   reduce using rule 51 (exp -> exp MAIORIGUAL exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125

  ! MAIS            [ reduce using rule 51 (exp -> exp MAIORIGUAL exp .) ]
  ! MENOS           [ reduce using rule 51 (exp -> exp MAIORIGUAL exp .) ]
  ! MULT            [ reduce using rule 51 (exp -> exp MAIORIGUAL exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp MAIORIGUAL exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 157

    (49) exp -> exp DIFERENTE exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 49 (exp -> exp DIFERENTE exp .)
    IGUAL           reduce using rule 49 (exp -> exp DIFERENTE exp .)
    DIFERENTE       reduce using rule 49 (exp -> exp DIFERENTE exp .)
    E               reduce using rule 49 (exp -> exp DIFERENTE exp .)
    OU              reduce using rule 49 (exp -> exp DIFERENTE exp .)
    TERNARIOSE      reduce using rule 49 (exp -> exp DIFERENTE exp .)
    VIRGULA         reduce using rule 49 (exp -> exp DIFERENTE exp .)
    PONTOVIRGULA    reduce using rule 49 (exp -> exp DIFERENTE exp .)
    FECHAPAREN      reduce using rule 49 (exp -> exp DIFERENTE exp .)
    FECHACOLCH      reduce using rule 49 (exp -> exp DIFERENTE exp .)
    TERNARIOSENAO   reduce using rule 49 (exp -> exp DIFERENTE exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123

  ! MAIS            [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MENOS           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MULT            [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MENORIGUAL      [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MAIORIGUAL      [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MAIOR           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MENOR           [ reduce using rule 49 (exp -> exp DIFERENTE exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 158

    (50) exp -> exp MENORIGUAL exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    MOD             reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    IGUAL           reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    DIFERENTE       reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MENORIGUAL      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MAIORIGUAL      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MAIOR           reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MENOR           reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    E               reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    OU              reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    TERNARIOSE      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    VIRGULA         reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    PONTOVIRGULA    reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    FECHAPAREN      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    FECHACOLCH      reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    TERNARIOSENAO   reduce using rule 50 (exp -> exp MENORIGUAL exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125

  ! MAIS            [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MENOS           [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MULT            [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp MENORIGUAL exp .) ]
  ! MOD             [ shift and go to state 128 ]
  ! IGUAL           [ shift and go to state 121 ]
  ! DIFERENTE       [ shift and go to state 132 ]
  ! MENORIGUAL      [ shift and go to state 133 ]
  ! MAIORIGUAL      [ shift and go to state 131 ]
  ! MAIOR           [ shift and go to state 124 ]
  ! MENOR           [ shift and go to state 123 ]
  ! E               [ shift and go to state 126 ]
  ! OU              [ shift and go to state 130 ]
  ! TERNARIOSE      [ shift and go to state 129 ]


state 159

    (62) exp -> ABREPAREN exp FECHAPAREN .

    MAIS            reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MENOS           reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MULT            reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    DIV             reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MOD             reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    IGUAL           reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    DIFERENTE       reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MENORIGUAL      reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MAIORIGUAL      reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MAIOR           reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    MENOR           reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    E               reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    OU              reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    TERNARIOSE      reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    VIRGULA         reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    PONTOVIRGULA    reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    FECHAPAREN      reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    FECHACOLCH      reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)
    TERNARIOSENAO   reduce using rule 62 (exp -> ABREPAREN exp FECHAPAREN .)


state 160

    (25) ifStmt -> IF ABREPAREN exp FECHAPAREN . ABRECHAVE block FECHACHAVE
    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN . FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE

    ABRECHAVE       shift and go to state 167
    FECHACHAVE      shift and go to state 168


state 161

    (42) var -> ID ABRECOLCH exp FECHACOLCH .

    MAIS            reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MENOS           reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MULT            reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    DIV             reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MOD             reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    IGUAL           reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    DIFERENTE       reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MENORIGUAL      reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MAIORIGUAL      reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MAIOR           reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MENOR           reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    E               reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    OU              reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    TERNARIOSE      reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    PONTOVIRGULA    reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    FECHAPAREN      reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    VIRGULA         reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    FECHACOLCH      reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    TERNARIOSENAO   reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    ATRIB           reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MAISATRIB       reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MENOSATRIB      reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MULTATRIB       reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    DIVATRIB        reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)
    MODATRIB        reduce using rule 42 (var -> ID ABRECOLCH exp FECHACOLCH .)


state 162

    (34) subCall -> ID ABREPAREN expList FECHAPAREN .

    MAIS            reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MENOS           reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MULT            reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    DIV             reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MOD             reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    IGUAL           reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    DIFERENTE       reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MENORIGUAL      reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MAIORIGUAL      reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MAIOR           reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    MENOR           reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    E               reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    OU              reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    TERNARIOSE      reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    PONTOVIRGULA    reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    FECHAPAREN      reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    VIRGULA         reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    FECHACOLCH      reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)
    TERNARIOSENAO   reduce using rule 34 (subCall -> ID ABREPAREN expList FECHAPAREN .)


state 163

    (78) literalSeq -> literal VIRGULA literalSeq .

    FECHACHAVE      reduce using rule 78 (literalSeq -> literal VIRGULA literalSeq .)


state 164

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp . PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

    PONTOVIRGULA    shift and go to state 169
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129


state 165

    (27) whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE . block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    block                          shift and go to state 170
    varDecList                     shift and go to state 46

state 166

    (58) exp -> exp TERNARIOSE exp TERNARIOSENAO . exp
    (43) exp -> . exp MAIS exp
    (44) exp -> . exp MENOS exp
    (45) exp -> . exp MULT exp
    (46) exp -> . exp DIV exp
    (47) exp -> . exp MOD exp
    (48) exp -> . exp IGUAL exp
    (49) exp -> . exp DIFERENTE exp
    (50) exp -> . exp MENORIGUAL exp
    (51) exp -> . exp MAIORIGUAL exp
    (52) exp -> . exp MAIOR exp
    (53) exp -> . exp MENOR exp
    (54) exp -> . exp E exp
    (55) exp -> . exp OU exp
    (56) exp -> . NEG exp
    (57) exp -> . SINAL exp
    (58) exp -> . exp TERNARIOSE exp TERNARIOSENAO exp
    (59) exp -> . subCall
    (60) exp -> . var
    (61) exp -> . literal
    (62) exp -> . ABREPAREN exp FECHAPAREN
    (63) exp -> . param
    (34) subCall -> . ID ABREPAREN expList FECHAPAREN
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH
    (64) literal -> . NUMBER
    (65) literal -> . CADEIA
    (66) literal -> . TRUE
    (67) literal -> . FALSE
    (13) param -> . type ID
    (14) param -> . type ID ABRECOLCH FECHACOLCH
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    NEG             shift and go to state 89
    SINAL           shift and go to state 84
    ABREPAREN       shift and go to state 93
    ID              shift and go to state 71
    NUMBER          shift and go to state 30
    CADEIA          shift and go to state 33
    TRUE            shift and go to state 32
    FALSE           shift and go to state 31
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    subCall                        shift and go to state 91
    var                            shift and go to state 85
    type                           shift and go to state 16
    exp                            shift and go to state 171
    param                          shift and go to state 94
    literal                        shift and go to state 86

state 167

    (25) ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE . block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    block                          shift and go to state 172
    varDecList                     shift and go to state 46

state 168

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE . block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    block                          shift and go to state 173
    varDecList                     shift and go to state 46

state 169

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA . assign FECHAPAREN ABRECHAVE block FECHACHAVE
    (35) assign -> . var ATRIB exp
    (36) assign -> . var MAISATRIB exp
    (37) assign -> . var MENOSATRIB exp
    (38) assign -> . var MULTATRIB exp
    (39) assign -> . var DIVATRIB exp
    (40) assign -> . var MODATRIB exp
    (41) var -> . ID
    (42) var -> . ID ABRECOLCH exp FECHACOLCH

    ID              shift and go to state 95

    var                            shift and go to state 57
    assign                         shift and go to state 174

state 170

    (27) whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block . FECHACHAVE

    FECHACHAVE      shift and go to state 175


state 171

    (58) exp -> exp TERNARIOSE exp TERNARIOSENAO exp .
    (43) exp -> exp . MAIS exp
    (44) exp -> exp . MENOS exp
    (45) exp -> exp . MULT exp
    (46) exp -> exp . DIV exp
    (47) exp -> exp . MOD exp
    (48) exp -> exp . IGUAL exp
    (49) exp -> exp . DIFERENTE exp
    (50) exp -> exp . MENORIGUAL exp
    (51) exp -> exp . MAIORIGUAL exp
    (52) exp -> exp . MAIOR exp
    (53) exp -> exp . MENOR exp
    (54) exp -> exp . E exp
    (55) exp -> exp . OU exp
    (58) exp -> exp . TERNARIOSE exp TERNARIOSENAO exp

  ! shift/reduce conflict for MAIS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for OU resolved as shift
  ! shift/reduce conflict for TERNARIOSE resolved as shift
    VIRGULA         reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .)
    PONTOVIRGULA    reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .)
    FECHAPAREN      reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .)
    FECHACOLCH      reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .)
    TERNARIOSENAO   reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .)
    MAIS            shift and go to state 119
    MENOS           shift and go to state 120
    MULT            shift and go to state 122
    DIV             shift and go to state 125
    MOD             shift and go to state 128
    IGUAL           shift and go to state 121
    DIFERENTE       shift and go to state 132
    MENORIGUAL      shift and go to state 133
    MAIORIGUAL      shift and go to state 131
    MAIOR           shift and go to state 124
    MENOR           shift and go to state 123
    E               shift and go to state 126
    OU              shift and go to state 130
    TERNARIOSE      shift and go to state 129

  ! MAIS            [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MENOS           [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MULT            [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! IGUAL           [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! DIFERENTE       [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MENORIGUAL      [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MAIORIGUAL      [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MAIOR           [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! MENOR           [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! E               [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! OU              [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]
  ! TERNARIOSE      [ reduce using rule 58 (exp -> exp TERNARIOSE exp TERNARIOSENAO exp .) ]


state 172

    (25) ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block . FECHACHAVE

    FECHACHAVE      shift and go to state 176


state 173

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block . FECHACHAVE ELSE ABRECHAVE block FECHACHAVE

    FECHACHAVE      shift and go to state 177


state 174

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign . FECHAPAREN ABRECHAVE block FECHACHAVE

    FECHAPAREN      shift and go to state 178


state 175

    (27) whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .

    IF              reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    WHILE           reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    FOR             reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    BREAK           reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    RETURN          reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    READ            reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    WRITE           reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    ID              reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    FECHACHAVE      reduce using rule 27 (whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)


state 176

    (25) ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .

    IF              reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    WHILE           reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    FOR             reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    BREAK           reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    RETURN          reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    READ            reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    WRITE           reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    ID              reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)
    FECHACHAVE      reduce using rule 25 (ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE .)


state 177

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE . ELSE ABRECHAVE block FECHACHAVE

    ELSE            shift and go to state 179


state 178

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN . ABRECHAVE block FECHACHAVE

    ABRECHAVE       shift and go to state 180


state 179

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE . ABRECHAVE block FECHACHAVE

    ABRECHAVE       shift and go to state 181


state 180

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE . block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    block                          shift and go to state 182
    varDecList                     shift and go to state 46

state 181

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE . block FECHACHAVE
    (15) block -> . varDecList stmtList
    (72) varDecList -> . varDec varDecList
    (73) varDecList -> . empty
    (5) varDec -> . type varSpecSeq PONTOVIRGULA
    (86) empty -> .
    (10) type -> . INT
    (11) type -> . STRING
    (12) type -> . BOOL

    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FOR             reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    FECHACHAVE      reduce using rule 86 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 3

    type                           shift and go to state 43
    empty                          shift and go to state 44
    varDec                         shift and go to state 42
    block                          shift and go to state 183
    varDecList                     shift and go to state 46

state 182

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block . FECHACHAVE

    FECHACHAVE      shift and go to state 184


state 183

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block . FECHACHAVE

    FECHACHAVE      shift and go to state 185


state 184

    (28) forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .

    IF              reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    WHILE           reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    FOR             reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    BREAK           reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    RETURN          reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    READ            reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    WRITE           reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    ID              reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)
    FECHACHAVE      reduce using rule 28 (forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE .)


state 185

    (26) ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .

    IF              reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    WHILE           reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    FOR             reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    BREAK           reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    RETURN          reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    READ            reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    WRITE           reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    ID              reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)
    FECHACHAVE      reduce using rule 26 (ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIS in state 153 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 153 resolved as shift
WARNING: shift/reduce conflict for MULT in state 153 resolved as shift
WARNING: shift/reduce conflict for DIV in state 153 resolved as shift
WARNING: shift/reduce conflict for MOD in state 153 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 153 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 153 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 153 resolved as shift
WARNING: shift/reduce conflict for E in state 153 resolved as shift
WARNING: shift/reduce conflict for OU in state 153 resolved as shift
WARNING: shift/reduce conflict for TERNARIOSE in state 153 resolved as shift
WARNING: shift/reduce conflict for MAIS in state 171 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 171 resolved as shift
WARNING: shift/reduce conflict for MULT in state 171 resolved as shift
WARNING: shift/reduce conflict for DIV in state 171 resolved as shift
WARNING: shift/reduce conflict for MOD in state 171 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 171 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 171 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 171 resolved as shift
WARNING: shift/reduce conflict for E in state 171 resolved as shift
WARNING: shift/reduce conflict for OU in state 171 resolved as shift
WARNING: shift/reduce conflict for TERNARIOSE in state 171 resolved as shift
