
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightTERNARIOSEleftOUleftEleftIGUALDIFERENTEleftMAIORMAIORIGUALMENORMENORIGUALleftMAISMENOSleftMULTDIVleftNEGSINALID CADEIA NUMBER ABREPAREN FECHAPAREN ABRECOLCH FECHACOLCH ABRECHAVE FECHACHAVE VIRGULA PONTOVIRGULA MAIS MENOS MULT DIV MOD IGUAL DIFERENTE MAIOR MAIORIGUAL MENOR MENORIGUAL OU E NEG ATRIB MAISATRIB MENOSATRIB MULTATRIB DIVATRIB MODATRIB SINAL TERNARIOSE TERNARIOSENAO RETURN STRING INT ELSE BREAK FALSE TRUE IF FOR WRITE READ WHILE BOOL program : decSeq\n    dec : varDec\n        | ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE\n        | type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE\n    varDec : type varSpecSeq PONTOVIRGULA\n    varSpec : ID\n            | ID ATRIB literal\n            | ID ABRECOLCH NUMBER FECHACOLCH\n            | ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE\n    \n    type : INT\n         | STRING\n         | BOOL\n    \n    param : type ID\n          | type ID ABRECOLCH FECHACOLCH\n     block : varDecList stmtList\n      stmt : ifStmt\n           | whileStmt\n           | forStmt\n           | breakStmt\n           | returnStmt\n           | readStmt\n           | writeStmt\n           | assign PONTOVIRGULA\n           | subCall PONTOVIRGULA\n    \n    ifStmt : IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE\n           | IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE\n     whileStmt : WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE forStmt : FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVEbreakStmt : BREAK PONTOVIRGULAreadStmt : READ var PONTOVIRGULAwriteStmt : WRITE expList PONTOVIRGULA\n    returnStmt : RETURN PONTOVIRGULA\n               | RETURN exp PONTOVIRGULA\n    subCall : ID ABREPAREN expList FECHAPAREN\n    assign : var ATRIB exp\n           | var MAISATRIB exp\n           | var MENOSATRIB exp\n           | var MULTATRIB exp\n           | var DIVATRIB exp\n           | var MODATRIB exp\n    \n    var : ID\n        | ID ABRECOLCH exp FECHACOLCH\n    \n    exp : exp MAIS exp\n        | exp MENOS exp\n        | exp MULT exp\n        | exp DIV exp\n        | exp MOD exp\n        | exp IGUAL exp\n        | exp DIFERENTE exp\n        | exp MENORIGUAL exp\n        | exp MAIORIGUAL exp\n        | exp MAIOR exp\n        | exp MENOR exp\n        | exp E exp\n        | exp OU exp\n        | NEG exp\n        | SINAL exp\n        | exp TERNARIOSE exp TERNARIOSENAO exp\n        | subCall\n        | var\n        | literal\n        | ABREPAREN exp FECHAPAREN\n        | param\n    \n    literal : NUMBER\n            | CADEIA\n            | TRUE\n            | FALSE\n    \n    paramList : paramSeq\n              | empty\n    \n    paramSeq : param VIRGULA paramSeq\n             | param\n    \n    varDecList : varDec varDecList\n               | empty\n    \n    varSpecSeq : varSpec VIRGULA varSpecSeq\n               | varSpec\n    \n    expList : expSeq\n            | empty\n    \n    literalSeq : literal VIRGULA literalSeq\n               | literal\n    \n    stmtList : stmt stmtList\n             | empty\n    \n    decSeq : dec decSeq\n           | dec\n    \n    expSeq : exp VIRGULA expSeq\n           | exp\n     empty : '
    
_lr_action_items = {'RETURN':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,54,-72,-21,-17,-19,54,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'FECHACHAVE':([16,27,28,29,31,40,42,44,45,47,48,50,52,58,60,62,64,65,67,69,70,72,73,76,77,84,87,100,106,107,121,128,139,142,163,165,167,168,170,172,173,174,177,180,181,182,183,184,185,],[-5,-67,-65,-64,-66,-86,-86,-86,-73,53,-86,75,-72,-21,-17,-81,-19,-86,-20,-22,-16,-18,-15,-79,109,-32,-24,-80,-29,-23,-33,-30,-31,-78,167,-86,-86,-86,174,176,177,-27,-25,-86,-86,184,185,-28,-26,]),'ABREPAREN':([8,13,54,57,59,63,66,68,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[14,18,79,90,91,99,79,105,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'READ':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,56,-72,-21,-17,-19,56,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'NEG':([54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'NUMBER':([17,19,51,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,108,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[29,33,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'ABRECHAVE':([35,37,43,158,163,178,179,],[40,42,51,165,168,180,181,]),'IGUAL':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,117,117,117,-56,-57,117,117,117,117,117,117,117,117,117,-62,-43,-51,117,-52,-48,-49,-53,-44,-50,-46,117,117,-45,117,-34,-42,117,117,]),'ABRECOLCH':([13,26,36,59,89,],[19,19,41,92,92,]),'DIFERENTE':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,118,118,118,-56,-57,118,118,118,118,118,118,118,118,118,-62,-43,-51,118,-52,-48,-49,-53,-44,-50,-46,118,118,-45,118,-34,-42,118,118,]),'WHILE':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,57,-72,-21,-17,-19,57,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'DIV':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,123,123,123,-56,-57,123,123,123,123,123,123,123,123,123,-62,123,123,123,123,123,123,123,123,123,-46,123,123,-45,123,-34,-42,123,123,]),'TRUE':([17,51,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,108,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'MULT':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,126,126,126,-56,-57,126,126,126,126,126,126,126,126,126,-62,126,126,126,126,126,126,126,126,126,-46,126,126,-45,126,-34,-42,126,126,]),'MAISATRIB':([59,61,89,160,],[-41,94,-41,-42,]),'ATRIB':([13,26,38,59,61,89,160,],[17,17,43,-41,93,-41,-42,]),'VIRGULA':([11,13,21,26,27,28,29,30,31,36,38,49,59,76,78,81,82,83,104,109,111,112,143,144,145,147,148,149,150,151,152,153,154,155,156,157,159,160,169,],[15,-6,34,-6,-67,-65,-64,-7,-66,-13,-8,-14,-41,108,-59,-63,-61,-60,140,-9,-56,-57,-62,-43,-51,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,-47,-34,-42,-58,]),'FECHACOLCH':([27,28,29,31,33,36,41,49,59,78,81,82,83,111,112,131,143,144,145,147,148,149,150,151,152,153,154,155,156,157,159,160,169,],[-67,-65,-64,-66,38,-13,49,-14,-41,-59,-63,-61,-60,-56,-57,160,-62,-43,-51,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,-47,-34,-42,-58,]),'MAIOR':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,116,116,116,-56,-57,116,116,116,116,116,116,116,116,116,-62,-43,-51,116,-52,116,116,-53,-44,-50,-46,116,116,-45,116,-34,-42,116,116,]),'MENORIGUAL':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,122,122,122,-56,-57,122,122,122,122,122,122,122,122,122,-62,-43,-51,122,-52,122,122,-53,-44,-50,-46,122,122,-45,122,-34,-42,122,122,]),'MENOSATRIB':([59,61,89,160,],[-41,97,-41,-42,]),'FECHAPAREN':([14,18,20,21,22,23,27,28,29,31,32,36,39,49,59,78,81,82,83,91,101,103,104,110,111,112,129,130,132,133,134,135,136,137,141,143,144,145,147,148,149,150,151,152,153,154,155,156,157,159,160,162,169,175,],[-86,-86,-68,-71,-69,35,-67,-65,-64,-66,37,-13,-70,-14,-41,-59,-63,-61,-60,-86,-76,-77,-85,143,-56,-57,158,159,-35,-36,-38,-39,-37,-40,163,-62,-43,-51,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,-47,-34,-42,-84,-58,178,]),'$end':([1,3,4,6,10,16,53,75,],[-2,-1,0,-83,-82,-5,-3,-4,]),'E':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,124,124,124,-56,-57,124,124,124,124,124,124,124,124,124,-62,-43,-51,124,-52,-48,-49,-53,-44,-50,-46,-54,124,-45,124,-34,-42,124,124,]),'STRING':([0,1,6,14,16,18,34,40,42,44,53,54,66,75,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,165,167,168,180,181,],[9,-2,9,9,-5,9,9,9,9,9,-3,9,9,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'FOR':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,63,-72,-21,-17,-19,63,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'DIVATRIB':([59,61,89,160,],[-41,96,-41,-42,]),'WRITE':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,66,-72,-21,-17,-19,66,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'TERNARIOSENAO':([27,28,29,31,36,49,59,78,81,82,83,111,112,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,-56,-57,-62,-43,-51,164,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,-47,-34,-42,-58,]),'MULTATRIB':([59,61,89,160,],[-41,95,-41,-42,]),'PONTOVIRGULA':([11,12,13,25,26,27,28,29,30,31,36,38,49,54,55,59,66,71,74,78,81,82,83,86,88,89,101,102,103,104,109,111,112,132,133,134,135,136,137,138,143,144,145,147,148,149,150,151,152,153,154,155,156,157,159,160,162,166,169,],[-75,16,-6,-74,-6,-67,-65,-64,-7,-66,-13,-8,-14,84,87,-41,-86,106,107,-59,-63,-61,-60,121,128,-41,-76,139,-77,-85,-9,-56,-57,-35,-36,-38,-39,-37,-40,161,-62,-43,-51,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,-47,-34,-42,-84,171,-58,]),'SINAL':([54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'ELSE':([176,],[179,]),'ID':([0,1,2,5,6,7,9,15,16,24,40,42,44,45,46,48,52,53,54,56,58,60,64,65,66,67,69,70,72,75,79,80,84,85,87,90,91,92,93,94,95,96,97,98,99,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,139,140,161,164,165,167,168,171,174,177,180,181,184,185,],[8,-2,-10,-12,8,13,-11,26,-5,36,-86,-86,-86,-73,26,59,-72,-3,59,89,-21,-17,-19,59,59,-20,-22,-16,-18,-4,59,59,-32,59,-24,59,59,59,59,59,59,59,59,59,89,59,-29,-23,59,59,59,59,59,59,59,59,-33,59,59,59,59,59,59,-30,-31,59,59,59,-86,-86,-86,89,-27,-25,-86,-86,-28,-26,]),'IF':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,68,-72,-21,-17,-19,68,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'MODATRIB':([59,61,89,160,],[-41,98,-41,-42,]),'FALSE':([17,51,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,108,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MAIS':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,113,113,113,-56,-57,113,113,113,113,113,113,113,113,113,-62,-43,113,113,113,113,113,113,-44,113,-46,113,113,-45,113,-34,-42,113,113,]),'INT':([0,1,6,14,16,18,34,40,42,44,53,54,66,75,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,165,167,168,180,181,],[2,-2,2,2,-5,2,2,2,2,2,-3,2,2,-4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'CADEIA':([17,51,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,108,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'TERNARIOSE':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,115,115,115,-56,-57,115,115,115,115,115,115,115,115,115,-62,-43,-51,115,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,115,-34,-42,115,115,]),'BREAK':([16,40,42,44,45,48,52,58,60,64,65,67,69,70,72,84,87,106,107,121,128,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-86,-86,-73,71,-72,-21,-17,-19,71,-20,-22,-16,-18,-32,-24,-29,-23,-33,-30,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'MAIORIGUAL':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,114,114,114,-56,-57,114,114,114,114,114,114,114,114,114,-62,-43,-51,114,-52,114,114,-53,-44,-50,-46,114,114,-45,114,-34,-42,114,114,]),'MENOR':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,119,119,119,-56,-57,119,119,119,119,119,119,119,119,119,-62,-43,-51,119,-52,119,119,-53,-44,-50,-46,119,119,-45,119,-34,-42,119,119,]),'MENOS':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,120,120,120,-56,-57,120,120,120,120,120,120,120,120,120,-62,-43,120,120,120,120,120,120,-44,120,-46,120,120,-45,120,-34,-42,120,120,]),'BOOL':([0,1,6,14,16,18,34,40,42,44,53,54,66,75,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,165,167,168,180,181,],[5,-2,5,5,-5,5,5,5,5,5,-3,5,5,-4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'OU':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,125,125,125,-56,-57,125,125,125,125,125,125,125,125,125,-62,-43,-51,125,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,125,-34,-42,125,125,]),'MOD':([27,28,29,31,36,49,59,78,81,82,83,86,104,110,111,112,129,131,132,133,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,166,169,],[-67,-65,-64,-66,-13,-14,-41,-59,-63,-61,-60,127,127,127,-56,-57,127,127,127,127,127,127,127,127,127,-62,-43,-51,127,-52,-48,-49,-53,-44,-50,-46,-54,-55,-45,127,-34,-42,127,127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'subCall':([48,54,65,66,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[55,78,55,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'readStmt':([48,65,],[58,58,]),'param':([14,18,34,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[21,21,21,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'whileStmt':([48,65,],[60,60,]),'literal':([17,51,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,108,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[30,76,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,76,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'program':([0,],[4,]),'expSeq':([66,91,140,],[101,101,162,]),'paramList':([14,18,],[23,32,]),'var':([48,54,56,65,66,79,80,85,90,91,92,93,94,95,96,97,98,99,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,171,],[61,83,88,61,83,83,83,83,83,83,83,83,83,83,83,83,83,61,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,61,]),'expList':([66,91,],[102,130,]),'type':([0,6,14,18,34,40,42,44,54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,165,167,168,180,181,],[7,7,24,24,24,46,46,46,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,46,46,46,46,46,]),'empty':([14,18,40,42,44,48,65,66,91,165,167,168,180,181,],[22,22,45,45,45,62,62,103,103,45,45,45,45,45,]),'paramSeq':([14,18,34,],[20,20,39,]),'decSeq':([0,6,],[3,10,]),'exp':([54,66,79,80,85,90,91,92,93,94,95,96,97,98,105,113,114,115,116,117,118,119,120,122,123,124,125,126,127,140,161,164,],[86,104,110,111,112,129,104,131,132,133,134,135,136,137,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,104,166,169,]),'breakStmt':([48,65,],[64,64,]),'varDec':([0,6,40,42,44,165,167,168,180,181,],[1,1,44,44,44,44,44,44,44,44,]),'stmt':([48,65,],[65,65,]),'varSpec':([7,15,46,],[11,11,11,]),'returnStmt':([48,65,],[67,67,]),'varDecList':([40,42,44,165,167,168,180,181,],[48,48,52,48,48,48,48,48,]),'writeStmt':([48,65,],[69,69,]),'assign':([48,65,99,171,],[74,74,138,175,]),'forStmt':([48,65,],[72,72,]),'stmtList':([48,65,],[73,100,]),'literalSeq':([51,108,],[77,142,]),'varSpecSeq':([7,15,46,],[12,25,12,]),'dec':([0,6,],[6,6,]),'ifStmt':([48,65,],[70,70,]),'block':([40,42,165,167,168,180,181,],[47,50,170,172,173,182,183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','parser.py',29),
  ('dec -> varDec','dec',1,'p_dec','parser.py',35),
  ('dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE','dec',7,'p_dec','parser.py',36),
  ('dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE','dec',8,'p_dec','parser.py',37),
  ('varDec -> type varSpecSeq PONTOVIRGULA','varDec',3,'p_var_dec','parser.py',48),
  ('varSpec -> ID','varSpec',1,'p_var_spec','parser.py',54),
  ('varSpec -> ID ATRIB literal','varSpec',3,'p_var_spec','parser.py',55),
  ('varSpec -> ID ABRECOLCH NUMBER FECHACOLCH','varSpec',4,'p_var_spec','parser.py',56),
  ('varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE','varSpec',8,'p_var_spec','parser.py',57),
  ('type -> INT','type',1,'p_type','parser.py',71),
  ('type -> STRING','type',1,'p_type','parser.py',72),
  ('type -> BOOL','type',1,'p_type','parser.py',73),
  ('param -> type ID','param',2,'p_param','parser.py',80),
  ('param -> type ID ABRECOLCH FECHACOLCH','param',4,'p_param','parser.py',81),
  ('block -> varDecList stmtList','block',2,'p_block','parser.py',90),
  ('stmt -> ifStmt','stmt',1,'p_stmt','parser.py',96),
  ('stmt -> whileStmt','stmt',1,'p_stmt','parser.py',97),
  ('stmt -> forStmt','stmt',1,'p_stmt','parser.py',98),
  ('stmt -> breakStmt','stmt',1,'p_stmt','parser.py',99),
  ('stmt -> returnStmt','stmt',1,'p_stmt','parser.py',100),
  ('stmt -> readStmt','stmt',1,'p_stmt','parser.py',101),
  ('stmt -> writeStmt','stmt',1,'p_stmt','parser.py',102),
  ('stmt -> assign PONTOVIRGULA','stmt',2,'p_stmt','parser.py',103),
  ('stmt -> subCall PONTOVIRGULA','stmt',2,'p_stmt','parser.py',104),
  ('ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE','ifStmt',7,'p_if_stmt','parser.py',111),
  ('ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE','ifStmt',11,'p_if_stmt','parser.py',112),
  ('whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE','whileStmt',7,'p_while_stmt','parser.py',121),
  ('forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE','forStmt',11,'p_for_stmt','parser.py',126),
  ('breakStmt -> BREAK PONTOVIRGULA','breakStmt',2,'p_break_stmt','parser.py',131),
  ('readStmt -> READ var PONTOVIRGULA','readStmt',3,'p_read_stmt','parser.py',136),
  ('writeStmt -> WRITE expList PONTOVIRGULA','writeStmt',3,'p_write_stmt','parser.py',141),
  ('returnStmt -> RETURN PONTOVIRGULA','returnStmt',2,'p_return_stmt','parser.py',147),
  ('returnStmt -> RETURN exp PONTOVIRGULA','returnStmt',3,'p_return_stmt','parser.py',148),
  ('subCall -> ID ABREPAREN expList FECHAPAREN','subCall',4,'p_sub_call','parser.py',157),
  ('assign -> var ATRIB exp','assign',3,'p_assign','parser.py',163),
  ('assign -> var MAISATRIB exp','assign',3,'p_assign','parser.py',164),
  ('assign -> var MENOSATRIB exp','assign',3,'p_assign','parser.py',165),
  ('assign -> var MULTATRIB exp','assign',3,'p_assign','parser.py',166),
  ('assign -> var DIVATRIB exp','assign',3,'p_assign','parser.py',167),
  ('assign -> var MODATRIB exp','assign',3,'p_assign','parser.py',168),
  ('var -> ID','var',1,'p_var','parser.py',175),
  ('var -> ID ABRECOLCH exp FECHACOLCH','var',4,'p_var','parser.py',176),
  ('exp -> exp MAIS exp','exp',3,'p_exp','parser.py',186),
  ('exp -> exp MENOS exp','exp',3,'p_exp','parser.py',187),
  ('exp -> exp MULT exp','exp',3,'p_exp','parser.py',188),
  ('exp -> exp DIV exp','exp',3,'p_exp','parser.py',189),
  ('exp -> exp MOD exp','exp',3,'p_exp','parser.py',190),
  ('exp -> exp IGUAL exp','exp',3,'p_exp','parser.py',191),
  ('exp -> exp DIFERENTE exp','exp',3,'p_exp','parser.py',192),
  ('exp -> exp MENORIGUAL exp','exp',3,'p_exp','parser.py',193),
  ('exp -> exp MAIORIGUAL exp','exp',3,'p_exp','parser.py',194),
  ('exp -> exp MAIOR exp','exp',3,'p_exp','parser.py',195),
  ('exp -> exp MENOR exp','exp',3,'p_exp','parser.py',196),
  ('exp -> exp E exp','exp',3,'p_exp','parser.py',197),
  ('exp -> exp OU exp','exp',3,'p_exp','parser.py',198),
  ('exp -> NEG exp','exp',2,'p_exp','parser.py',199),
  ('exp -> SINAL exp','exp',2,'p_exp','parser.py',200),
  ('exp -> exp TERNARIOSE exp TERNARIOSENAO exp','exp',5,'p_exp','parser.py',201),
  ('exp -> subCall','exp',1,'p_exp','parser.py',202),
  ('exp -> var','exp',1,'p_exp','parser.py',203),
  ('exp -> literal','exp',1,'p_exp','parser.py',204),
  ('exp -> ABREPAREN exp FECHAPAREN','exp',3,'p_exp','parser.py',205),
  ('exp -> param','exp',1,'p_exp','parser.py',206),
  ('literal -> NUMBER','literal',1,'p_literal','parser.py',231),
  ('literal -> CADEIA','literal',1,'p_literal','parser.py',232),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',233),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',234),
  ('paramList -> paramSeq','paramList',1,'p_param_list','parser.py',241),
  ('paramList -> empty','paramList',1,'p_param_list','parser.py',242),
  ('paramSeq -> param VIRGULA paramSeq','paramSeq',3,'p_param_seq','parser.py',249),
  ('paramSeq -> param','paramSeq',1,'p_param_seq','parser.py',250),
  ('varDecList -> varDec varDecList','varDecList',2,'p_var_dec_list','parser.py',260),
  ('varDecList -> empty','varDecList',1,'p_var_dec_list','parser.py',261),
  ('varSpecSeq -> varSpec VIRGULA varSpecSeq','varSpecSeq',3,'p_var_spec_seq','parser.py',268),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_var_spec_seq','parser.py',269),
  ('expList -> expSeq','expList',1,'p_exp_list','parser.py',279),
  ('expList -> empty','expList',1,'p_exp_list','parser.py',280),
  ('literalSeq -> literal VIRGULA literalSeq','literalSeq',3,'p_literal_seq','parser.py',287),
  ('literalSeq -> literal','literalSeq',1,'p_literal_seq','parser.py',288),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmt_list','parser.py',298),
  ('stmtList -> empty','stmtList',1,'p_stmt_list','parser.py',299),
  ('decSeq -> dec decSeq','decSeq',2,'p_dec_seq','parser.py',306),
  ('decSeq -> dec','decSeq',1,'p_dec_seq','parser.py',307),
  ('expSeq -> exp VIRGULA expSeq','expSeq',3,'p_exp_seq','parser.py',317),
  ('expSeq -> exp','expSeq',1,'p_exp_seq','parser.py',318),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',327),
]
