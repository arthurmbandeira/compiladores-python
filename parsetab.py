
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightTERNARIOSEleftOUleftEleftIGUALDIFERENTEleftMAIORMAIORIGUALMENORMENORIGUALleftMAISMENOSleftMULTDIVleftNEGSINALID CADEIA NUMBER ABREPAREN FECHAPAREN ABRECOLCH FECHACOLCH ABRECHAVE FECHACHAVE VIRGULA PONTOVIRGULA MAIS MENOS MULT DIV MOD IGUAL DIFERENTE MAIOR MAIORIGUAL MENOR MENORIGUAL OU E NEG ATRIB MAISATRIB MENOSATRIB MULTATRIB DIVATRIB MODATRIB SINAL TERNARIOSE TERNARIOSENAO FOR STRING WHILE RETURN IF ELSE BOOL BREAK TRUE FALSE WRITE INT READ program : decSeq\n    dec : varDec\n        | ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE\n        | type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE\n    varDec : type varSpecSeq PONTOVIRGULA\n    varSpec : ID\n            | ID ATRIB literal\n            | ID ABRECOLCH NUMBER FECHACOLCH\n            | ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE\n    \n    type : INT\n         | STRING\n         | BOOL\n    \n    param : type ID\n          | type ID ABRECOLCH FECHACOLCH\n     block : varDecList stmtList\n      stmt : ifStmt\n           | whileStmt\n           | forStmt\n           | breakStmt\n           | returnStmt\n           | readStmt\n           | writeStmt\n           | assign PONTOVIRGULA\n           | subCall PONTOVIRGULA\n    \n    ifStmt : IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE\n           | IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE\n     whileStmt : WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE forStmt : FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVEbreakStmt : BREAK PONTOVIRGULAreadStmt : READ var PONTOVIRGULAwriteStmt : WRITE expList PONTOVIRGULA\n    returnStmt : RETURN PONTOVIRGULA\n               | RETURN exp PONTOVIRGULA\n    subCall : ID ABREPAREN expList FECHAPAREN\n    assign : var ATRIB  exp\n           | var MAISATRIB exp\n           | var MENOSATRIB exp\n           | var MULTATRIB exp\n           | var DIVATRIB exp\n           | var MODATRIB exp\n    \n    var : ID\n        | ID ABRECOLCH exp FECHACOLCH\n    \n    exp : exp MAIS exp\n        | exp MENOS exp\n        | exp MULT exp\n        | exp DIV exp\n        | exp MOD exp\n        | exp IGUAL exp\n        | exp DIFERENTE exp\n        | exp MENORIGUAL exp\n        | exp MAIORIGUAL exp\n        | exp MAIOR exp\n        | exp MENOR exp\n        | exp E exp\n        | exp OU exp\n        | NEG exp\n        | SINAL exp\n        | exp TERNARIOSE exp TERNARIOSENAO exp\n        | subCall\n        | var\n        | literal\n        | ABREPAREN exp FECHAPAREN\n        | param\n    \n    literal : NUMBER\n            | CADEIA\n            | TRUE\n            | FALSE\n    \n    paramList : paramSeq\n              | empty\n    \n    paramSeq : param VIRGULA paramSeq\n             | param\n    \n    varDecList : varDec varDecList\n              | empty\n    \n    varSpecSeq : varSpec VIRGULA varSpecSeq\n               | varSpec\n    \n    expList : expSeq\n            | empty\n    \n    literalSeq : literal VIRGULA literalSeq\n               | literal\n    \n    stmtList : stmt stmtList\n             | empty\n    \n    decSeq : dec decSeq\n           | dec\n    \n    expSeq : exp VIRGULA expSeq\n           | exp\n     empty : '
    
_lr_action_items = {'MENOSATRIB':([57,71,95,161,],[78,-41,-41,-42,]),'NUMBER':([21,22,59,61,74,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,141,142,166,],[29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BOOL':([0,4,5,11,20,24,27,37,42,48,51,59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,105,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,165,166,167,168,180,181,],[3,-2,3,3,3,-5,3,3,3,3,-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'FOR':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,52,-86,-72,-18,-22,-16,-20,-19,52,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'E':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,126,-59,-63,126,126,126,126,126,126,126,126,-57,-56,126,126,126,-43,-44,-48,-45,-53,-52,-46,-54,126,126,126,-51,-49,-50,-62,-42,-34,126,126,]),'MULT':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,122,-59,-63,122,122,122,122,122,122,122,122,-57,-56,122,122,122,122,122,122,-45,122,122,-46,122,122,122,122,122,122,122,-62,-42,-34,122,122,]),'WHILE':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,54,-86,-72,-18,-22,-16,-20,-19,54,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'DIV':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,125,-59,-63,125,125,125,125,125,125,125,125,-57,-56,125,125,125,125,125,125,-45,125,125,-46,125,125,125,125,125,125,125,-62,-42,-34,125,125,]),'FECHACHAVE':([24,30,31,32,33,37,42,44,45,46,48,50,53,56,58,62,63,65,68,69,70,72,73,77,97,99,100,102,106,107,117,135,136,160,163,165,167,168,170,172,173,175,176,180,181,182,183,184,185,],[-5,-64,-67,-66,-65,-86,-86,-73,51,-86,-86,-72,-18,-22,-15,-16,-20,-19,-86,-81,-21,-17,105,-23,-32,-29,-24,-80,140,-79,-31,-30,-33,168,-78,-86,-86,-86,175,176,177,-27,-25,-86,-86,184,185,-28,-26,]),'SINAL':([59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'MAIOR':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,124,-59,-63,124,124,124,124,124,124,124,124,-57,-56,124,124,124,-43,-44,124,-45,-53,-52,-46,124,124,124,124,-51,124,-50,-62,-42,-34,124,124,]),'FALSE':([22,59,61,74,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,141,142,166,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'TERNARIOSE':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,129,-59,-63,129,129,129,129,129,129,129,129,-57,-56,129,129,129,-43,-44,-48,-45,-53,-52,-46,-54,129,129,-55,-51,-49,-50,-62,-42,-34,129,129,]),'INT':([0,4,5,11,20,24,27,37,42,48,51,59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,105,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,165,166,167,168,180,181,],[7,-2,7,7,7,-5,7,7,7,7,-3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'ELSE':([177,],[179,]),'WRITE':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,59,-86,-72,-18,-22,-16,-20,-19,59,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'RETURN':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,61,-86,-72,-18,-22,-16,-20,-19,61,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'IGUAL':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,121,-59,-63,121,121,121,121,121,121,121,121,-57,-56,121,121,121,-43,-44,-48,-45,-53,-52,-46,121,121,121,121,-51,-49,-50,-62,-42,-34,121,121,]),'TRUE':([22,59,61,74,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,141,142,166,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'MENOR':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,123,-59,-63,123,123,123,123,123,123,123,123,-57,-56,123,123,123,-43,-44,123,-45,-53,-52,-46,123,123,123,123,-51,123,-50,-62,-42,-34,123,123,]),'IF':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,67,-86,-72,-18,-22,-16,-20,-19,67,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'MOD':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,128,-59,-63,128,128,128,128,128,128,128,128,-57,-56,128,128,128,-43,-44,-48,-45,-53,-52,-46,-54,128,128,-55,-51,-49,-50,-62,-42,-34,128,128,]),'ABRECHAVE':([25,40,49,143,160,178,179,],[37,48,74,165,167,180,181,]),'OU':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,130,-59,-63,130,130,130,130,130,130,130,130,-57,-56,130,130,130,-43,-44,-48,-45,-53,-52,-46,-54,130,130,-55,-51,-49,-50,-62,-42,-34,130,130,]),'DIVATRIB':([57,71,95,161,],[82,-41,-41,-42,]),'MAIS':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,119,-59,-63,119,119,119,119,119,119,119,119,-57,-56,119,119,119,-43,-44,119,-45,119,119,-46,119,119,119,119,119,119,119,-62,-42,-34,119,119,]),'MENOS':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,120,-59,-63,120,120,120,120,120,120,120,120,-57,-56,120,120,120,-43,-44,120,-45,120,120,-46,120,120,120,120,120,120,120,-62,-42,-34,120,120,]),'STRING':([0,4,5,11,20,24,27,37,42,48,51,59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,105,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,165,166,167,168,180,181,],[9,-2,9,9,9,-5,9,9,9,9,-3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'$end':([1,2,4,5,10,24,51,105,],[0,-1,-2,-83,-82,-5,-3,-4,]),'MAISATRIB':([57,71,95,161,],[83,-41,-41,-42,]),'PONTOVIRGULA':([12,13,14,26,30,31,32,33,34,35,36,41,47,55,59,61,64,66,71,85,86,87,88,90,91,92,94,95,96,98,108,110,111,112,113,114,115,116,118,140,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,161,162,164,171,],[-6,-75,24,-13,-64,-67,-66,-65,-7,-6,-74,-8,-14,77,-86,97,99,100,-41,-60,-61,117,-76,-85,-59,-77,-63,-41,135,136,142,-37,-40,-35,-38,-39,-36,-57,-56,-9,-43,-44,-48,-45,-53,-52,-46,-54,-84,-47,-55,-51,-49,-50,-62,-42,-34,169,-58,]),'MAIORIGUAL':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,131,-59,-63,131,131,131,131,131,131,131,131,-57,-56,131,131,131,-43,-44,131,-45,-53,-52,-46,131,131,131,131,-51,131,-50,-62,-42,-34,131,131,]),'MODATRIB':([57,71,95,161,],[79,-41,-41,-42,]),'ABRECOLCH':([12,26,35,71,95,],[21,38,21,103,103,]),'ATRIB':([12,35,41,57,71,95,161,],[22,22,49,80,-41,-41,-42,]),'MULTATRIB':([57,71,95,161,],[81,-41,-41,-42,]),'FECHAPAREN':([11,15,17,18,19,20,26,28,30,31,32,33,39,47,71,85,86,88,90,91,92,94,104,109,110,111,112,113,114,115,116,118,134,137,139,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,161,162,171,174,],[-86,25,-68,-69,-71,-86,-13,40,-64,-67,-66,-65,-70,-14,-41,-60,-61,-76,-85,-59,-77,-63,-86,143,-37,-40,-35,-38,-39,-36,-57,-56,159,160,162,-43,-44,-48,-45,-53,-52,-46,-54,-84,-47,-55,-51,-49,-50,-62,-42,-34,-58,178,]),'DIFERENTE':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,132,-59,-63,132,132,132,132,132,132,132,132,-57,-56,132,132,132,-43,-44,-48,-45,-53,-52,-46,132,132,132,132,-51,-49,-50,-62,-42,-34,132,132,]),'READ':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,60,-86,-72,-18,-22,-16,-20,-19,60,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'NEG':([59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'ID':([0,3,4,5,7,8,9,16,23,24,37,42,43,44,46,48,50,51,53,56,59,60,61,62,63,65,68,70,72,75,76,77,78,79,80,81,82,83,84,89,93,97,99,100,101,103,104,105,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,142,165,166,167,168,169,175,176,180,181,184,185,],[6,-12,-2,6,-10,12,-11,26,35,-5,-86,-86,35,-73,71,-86,-72,-3,-18,-22,71,95,71,-16,-20,-19,71,-21,-17,95,71,-23,71,71,71,71,71,71,71,71,71,-32,-29,-24,71,71,71,-4,-31,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-30,-33,71,-86,71,-86,-86,95,-27,-25,-86,-86,-28,-26,]),'VIRGULA':([12,13,19,26,30,31,32,33,34,35,41,47,71,85,86,90,91,94,107,116,118,140,144,145,146,147,148,149,150,151,153,155,156,157,158,159,161,162,171,],[-6,23,27,-13,-64,-67,-66,-65,-7,-6,-8,-14,-41,-60,-61,127,-59,-63,141,-57,-56,-9,-43,-44,-48,-45,-53,-52,-46,-54,-47,-55,-51,-49,-50,-62,-42,-34,-58,]),'BREAK':([24,37,42,44,46,48,50,53,56,62,63,65,68,70,72,77,97,99,100,117,135,136,165,167,168,175,176,180,181,184,185,],[-5,-86,-86,-73,64,-86,-72,-18,-22,-16,-20,-19,64,-21,-17,-23,-32,-29,-24,-31,-30,-33,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'TERNARIOSENAO':([26,30,31,32,33,47,71,85,86,91,94,116,118,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,-59,-63,-57,-56,-43,-44,-48,-45,-53,-52,-46,-54,-47,166,-55,-51,-49,-50,-62,-42,-34,-58,]),'MENORIGUAL':([26,30,31,32,33,47,71,85,86,90,91,94,98,109,110,111,112,113,114,115,116,118,134,137,138,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,161,162,164,171,],[-13,-64,-67,-66,-65,-14,-41,-60,-61,133,-59,-63,133,133,133,133,133,133,133,133,-57,-56,133,133,133,-43,-44,133,-45,-53,-52,-46,133,133,133,133,-51,133,-50,-62,-42,-34,133,133,]),'ABREPAREN':([6,12,52,54,59,61,67,71,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,],[11,20,75,76,93,93,101,104,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'FECHACOLCH':([26,29,30,31,32,33,38,47,71,85,86,91,94,116,118,138,144,145,146,147,148,149,150,151,153,155,156,157,158,159,161,162,171,],[-13,41,-64,-67,-66,-65,47,-14,-41,-60,-61,-59,-63,-57,-56,161,-43,-44,-48,-45,-53,-52,-46,-54,-47,-55,-51,-49,-50,-62,-42,-34,-58,]),'CADEIA':([22,59,61,74,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,141,142,166,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decSeq':([0,5,],[2,10,]),'varDec':([0,5,37,42,48,165,167,168,180,181,],[4,4,42,42,42,42,42,42,42,42,]),'dec':([0,5,],[5,5,]),'forStmt':([46,68,],[53,53,]),'varSpec':([8,23,43,],[13,13,13,]),'assign':([46,68,75,169,],[55,55,108,174,]),'writeStmt':([46,68,],[56,56,]),'var':([46,59,60,61,68,75,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,169,],[57,85,96,85,57,57,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,57,]),'stmtList':([46,68,],[58,102,]),'expList':([59,104,],[87,139,]),'block':([37,48,165,167,168,180,181,],[45,73,170,172,173,182,183,]),'program':([0,],[1,]),'paramList':([11,20,],[15,28,]),'expSeq':([59,104,127,],[88,88,152,]),'ifStmt':([46,68,],[62,62,]),'literalSeq':([74,141,],[106,163,]),'exp':([59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,],[90,98,109,110,111,112,113,114,115,116,118,134,137,138,90,144,145,146,147,148,149,150,151,90,153,154,155,156,157,158,164,171,]),'breakStmt':([46,68,],[65,65,]),'type':([0,5,11,20,27,37,42,48,59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,165,166,167,168,180,181,],[8,8,16,16,16,43,43,43,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,43,16,43,43,43,43,]),'literal':([22,59,61,74,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,141,142,166,],[34,86,86,107,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,107,86,86,]),'subCall':([46,59,61,68,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,],[66,91,91,66,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'returnStmt':([46,68,],[63,63,]),'stmt':([46,68,],[68,68,]),'varSpecSeq':([8,23,43,],[14,36,14,]),'paramSeq':([11,20,27,],[17,17,39,]),'empty':([11,20,37,42,46,48,59,68,104,165,167,168,180,181,],[18,18,44,44,69,44,92,69,92,44,44,44,44,44,]),'readStmt':([46,68,],[70,70,]),'param':([11,20,27,59,61,76,78,79,80,81,82,83,84,89,93,101,103,104,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,142,166,],[19,19,19,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'varDecList':([37,42,48,165,167,168,180,181,],[46,50,46,46,46,46,46,46,]),'whileStmt':([46,68,],[72,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','parser.py',25),
  ('dec -> varDec','dec',1,'p_dec','parser.py',31),
  ('dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE','dec',7,'p_dec','parser.py',32),
  ('dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE','dec',8,'p_dec','parser.py',33),
  ('varDec -> type varSpecSeq PONTOVIRGULA','varDec',3,'p_var_dec','parser.py',39),
  ('varSpec -> ID','varSpec',1,'p_var_spec','parser.py',44),
  ('varSpec -> ID ATRIB literal','varSpec',3,'p_var_spec','parser.py',45),
  ('varSpec -> ID ABRECOLCH NUMBER FECHACOLCH','varSpec',4,'p_var_spec','parser.py',46),
  ('varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE','varSpec',8,'p_var_spec','parser.py',47),
  ('type -> INT','type',1,'p_type','parser.py',53),
  ('type -> STRING','type',1,'p_type','parser.py',54),
  ('type -> BOOL','type',1,'p_type','parser.py',55),
  ('param -> type ID','param',2,'p_param','parser.py',61),
  ('param -> type ID ABRECOLCH FECHACOLCH','param',4,'p_param','parser.py',62),
  ('block -> varDecList stmtList','block',2,'p_block','parser.py',67),
  ('stmt -> ifStmt','stmt',1,'p_stmt','parser.py',72),
  ('stmt -> whileStmt','stmt',1,'p_stmt','parser.py',73),
  ('stmt -> forStmt','stmt',1,'p_stmt','parser.py',74),
  ('stmt -> breakStmt','stmt',1,'p_stmt','parser.py',75),
  ('stmt -> returnStmt','stmt',1,'p_stmt','parser.py',76),
  ('stmt -> readStmt','stmt',1,'p_stmt','parser.py',77),
  ('stmt -> writeStmt','stmt',1,'p_stmt','parser.py',78),
  ('stmt -> assign PONTOVIRGULA','stmt',2,'p_stmt','parser.py',79),
  ('stmt -> subCall PONTOVIRGULA','stmt',2,'p_stmt','parser.py',80),
  ('ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE','ifStmt',7,'p_if_stmt','parser.py',86),
  ('ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE','ifStmt',11,'p_if_stmt','parser.py',87),
  ('whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE','whileStmt',7,'p_while_stmt','parser.py',92),
  ('forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE','forStmt',11,'p_for_stmt','parser.py',96),
  ('breakStmt -> BREAK PONTOVIRGULA','breakStmt',2,'p_break_stmt','parser.py',100),
  ('readStmt -> READ var PONTOVIRGULA','readStmt',3,'p_read_stmt','parser.py',104),
  ('writeStmt -> WRITE expList PONTOVIRGULA','writeStmt',3,'p_write_stmt','parser.py',108),
  ('returnStmt -> RETURN PONTOVIRGULA','returnStmt',2,'p_return_stmt','parser.py',113),
  ('returnStmt -> RETURN exp PONTOVIRGULA','returnStmt',3,'p_return_stmt','parser.py',114),
  ('subCall -> ID ABREPAREN expList FECHAPAREN','subCall',4,'p_sub_call','parser.py',119),
  ('assign -> var ATRIB exp','assign',3,'p_assign','parser.py',124),
  ('assign -> var MAISATRIB exp','assign',3,'p_assign','parser.py',125),
  ('assign -> var MENOSATRIB exp','assign',3,'p_assign','parser.py',126),
  ('assign -> var MULTATRIB exp','assign',3,'p_assign','parser.py',127),
  ('assign -> var DIVATRIB exp','assign',3,'p_assign','parser.py',128),
  ('assign -> var MODATRIB exp','assign',3,'p_assign','parser.py',129),
  ('var -> ID','var',1,'p_var','parser.py',135),
  ('var -> ID ABRECOLCH exp FECHACOLCH','var',4,'p_var','parser.py',136),
  ('exp -> exp MAIS exp','exp',3,'p_exp','parser.py',142),
  ('exp -> exp MENOS exp','exp',3,'p_exp','parser.py',143),
  ('exp -> exp MULT exp','exp',3,'p_exp','parser.py',144),
  ('exp -> exp DIV exp','exp',3,'p_exp','parser.py',145),
  ('exp -> exp MOD exp','exp',3,'p_exp','parser.py',146),
  ('exp -> exp IGUAL exp','exp',3,'p_exp','parser.py',147),
  ('exp -> exp DIFERENTE exp','exp',3,'p_exp','parser.py',148),
  ('exp -> exp MENORIGUAL exp','exp',3,'p_exp','parser.py',149),
  ('exp -> exp MAIORIGUAL exp','exp',3,'p_exp','parser.py',150),
  ('exp -> exp MAIOR exp','exp',3,'p_exp','parser.py',151),
  ('exp -> exp MENOR exp','exp',3,'p_exp','parser.py',152),
  ('exp -> exp E exp','exp',3,'p_exp','parser.py',153),
  ('exp -> exp OU exp','exp',3,'p_exp','parser.py',154),
  ('exp -> NEG exp','exp',2,'p_exp','parser.py',155),
  ('exp -> SINAL exp','exp',2,'p_exp','parser.py',156),
  ('exp -> exp TERNARIOSE exp TERNARIOSENAO exp','exp',5,'p_exp','parser.py',157),
  ('exp -> subCall','exp',1,'p_exp','parser.py',158),
  ('exp -> var','exp',1,'p_exp','parser.py',159),
  ('exp -> literal','exp',1,'p_exp','parser.py',160),
  ('exp -> ABREPAREN exp FECHAPAREN','exp',3,'p_exp','parser.py',161),
  ('exp -> param','exp',1,'p_exp','parser.py',162),
  ('literal -> NUMBER','literal',1,'p_literal','parser.py',168),
  ('literal -> CADEIA','literal',1,'p_literal','parser.py',169),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',170),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',171),
  ('paramList -> paramSeq','paramList',1,'p_param_list','parser.py',177),
  ('paramList -> empty','paramList',1,'p_param_list','parser.py',178),
  ('paramSeq -> param VIRGULA paramSeq','paramSeq',3,'p_param_seq','parser.py',184),
  ('paramSeq -> param','paramSeq',1,'p_param_seq','parser.py',185),
  ('varDecList -> varDec varDecList','varDecList',2,'p_var_dec_list','parser.py',191),
  ('varDecList -> empty','varDecList',1,'p_var_dec_list','parser.py',192),
  ('varSpecSeq -> varSpec VIRGULA varSpecSeq','varSpecSeq',3,'p_var_spec_seq','parser.py',198),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_var_spec_seq','parser.py',199),
  ('expList -> expSeq','expList',1,'p_exp_list','parser.py',205),
  ('expList -> empty','expList',1,'p_exp_list','parser.py',206),
  ('literalSeq -> literal VIRGULA literalSeq','literalSeq',3,'p_literal_seq','parser.py',212),
  ('literalSeq -> literal','literalSeq',1,'p_literal_seq','parser.py',213),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmt_list','parser.py',219),
  ('stmtList -> empty','stmtList',1,'p_stmt_list','parser.py',220),
  ('decSeq -> dec decSeq','decSeq',2,'p_dec_seq','parser.py',226),
  ('decSeq -> dec','decSeq',1,'p_dec_seq','parser.py',227),
  ('expSeq -> exp VIRGULA expSeq','expSeq',3,'p_exp_seq','parser.py',237),
  ('expSeq -> exp','expSeq',1,'p_exp_seq','parser.py',238),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',243),
]
