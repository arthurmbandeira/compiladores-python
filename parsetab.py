
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ID CADEIA NUMBER ABREPAREN FECHAPAREN ABRECOLCH FECHACOLCH ABRECHAVE FECHACHAVE VIRGULA PONTOVIRGULA MAIS MENOS MULT DIV IGUAL DIFERENTE MAIOR MAIORIGUAL MENOR MENORIGUAL OU E NEG ATRIB MAISATRIB MENOSATRIB MULTATRIB DIVATRIB MODATRIB TERNARIO TERNARIOSE TERNARIOSENAO COMENTARIO RETURN STRING INT ELSE BREAK FALSE TRUE IF FOR WHILE BOOL\n    \n     variavel : ID\n                 | ID ABRECOLCH expressao FECHACOLCH\n    expressao : expressao MAIS expressao\n                 | expressao MENOS expressao\n                 | expressao MULT expressao\n                 | expressao DIV expressao\n                 | variavel\n                 | literal\n                 | ABREPAREN expressao FECHAPARENliteral : NUMBER\n               | CADEIA'
    
_lr_action_items = {'MAIS':([2,4,6,7,8,9,10,14,16,17,18,19,20,],[-1,-7,11,-10,-8,-11,11,-2,-9,11,11,11,11,]),'ABREPAREN':([3,5,11,12,13,15,],[5,5,5,5,5,5,]),'CADEIA':([3,5,11,12,13,15,],[9,9,9,9,9,9,]),'NUMBER':([3,5,11,12,13,15,],[7,7,7,7,7,7,]),'ABRECOLCH':([2,],[3,]),'MENOS':([2,4,6,7,8,9,10,14,16,17,18,19,20,],[-1,-7,12,-10,-8,-11,12,-2,-9,12,12,12,12,]),'DIV':([2,4,6,7,8,9,10,14,16,17,18,19,20,],[-1,-7,13,-10,-8,-11,13,-2,-9,13,13,13,13,]),'FECHAPAREN':([2,4,7,8,9,10,14,16,17,18,19,20,],[-1,-7,-10,-8,-11,16,-2,-9,-3,-4,-6,-5,]),'FECHACOLCH':([2,4,6,7,8,9,14,16,17,18,19,20,],[-1,-7,14,-10,-8,-11,-2,-9,-3,-4,-6,-5,]),'ID':([0,3,5,11,12,13,15,],[2,2,2,2,2,2,2,]),'MULT':([2,4,6,7,8,9,10,14,16,17,18,19,20,],[-1,-7,15,-10,-8,-11,15,-2,-9,15,15,15,15,]),'$end':([1,2,14,],[0,-1,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressao':([3,5,11,12,13,15,],[6,10,17,18,19,20,]),'variavel':([0,3,5,11,12,13,15,],[1,4,4,4,4,4,4,]),'literal':([3,5,11,12,13,15,],[8,8,8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> variavel","S'",1,None,None,None),
  ('variavel -> ID','variavel',1,'p_variavel','parser.py',106),
  ('variavel -> ID ABRECOLCH expressao FECHACOLCH','variavel',4,'p_variavel','parser.py',107),
  ('expressao -> expressao MAIS expressao','expressao',3,'p_expressao','parser.py',133),
  ('expressao -> expressao MENOS expressao','expressao',3,'p_expressao','parser.py',134),
  ('expressao -> expressao MULT expressao','expressao',3,'p_expressao','parser.py',135),
  ('expressao -> expressao DIV expressao','expressao',3,'p_expressao','parser.py',136),
  ('expressao -> variavel','expressao',1,'p_expressao','parser.py',137),
  ('expressao -> literal','expressao',1,'p_expressao','parser.py',138),
  ('expressao -> ABREPAREN expressao FECHAPAREN','expressao',3,'p_expressao','parser.py',139),
  ('literal -> NUMBER','literal',1,'p_literal','parser.py',148),
  ('literal -> CADEIA','literal',1,'p_literal','parser.py',149),
]
