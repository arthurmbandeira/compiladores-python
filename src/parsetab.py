
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightTERNARIOSEleftOUleftEleftIGUALDIFERENTEleftMAIORMAIORIGUALMENORMENORIGUALleftMAISMENOSleftMULTDIVrightNEGSINALID CADEIA NUMBER ABREPAREN FECHAPAREN ABRECOLCH FECHACOLCH ABRECHAVE FECHACHAVE VIRGULA PONTOVIRGULA MAIS MENOS MULT DIV MOD IGUAL DIFERENTE MAIOR MAIORIGUAL MENOR MENORIGUAL OU E NEG ATRIB MAISATRIB MENOSATRIB MULTATRIB DIVATRIB MODATRIB SINAL TERNARIOSE TERNARIOSENAO TRUE READ INT FOR STRING RETURN ELSE BOOL FALSE WRITE IF BREAK WHILE program : decSeq\n    dec : varDec\n        | ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE\n        | type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE\n    varDec : type varSpecSeq PONTOVIRGULA\n    varSpec : ID\n            | ID ATRIB literal\n            | ID ABRECOLCH NUMBER FECHACOLCH\n            | ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE\n    \n    type : INT\n         | STRING\n         | BOOL\n    \n    param : type ID\n          | type ID ABRECOLCH FECHACOLCH\n     block : varDecList stmtList\n      stmt : ifStmt\n           | whileStmt\n           | forStmt\n           | breakStmt\n           | returnStmt\n           | readStmt\n           | writeStmt\n           | assign PONTOVIRGULA\n           | subCall PONTOVIRGULA\n    \n    ifStmt : IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE\n           | IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE\n     whileStmt : WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE forStmt : FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVEbreakStmt : BREAK PONTOVIRGULAreadStmt : READ var PONTOVIRGULAwriteStmt : WRITE expList PONTOVIRGULA\n    returnStmt : RETURN PONTOVIRGULA\n               | RETURN exp PONTOVIRGULA\n    subCall : ID ABREPAREN expList FECHAPAREN\n    assign : var ATRIB exp\n           | var MAISATRIB exp\n           | var MENOSATRIB exp\n           | var MULTATRIB exp\n           | var DIVATRIB exp\n           | var MODATRIB exp\n    \n    var : ID\n        | ID ABRECOLCH exp FECHACOLCH\n    \n    exp : exp MAIS exp\n        | exp MENOS exp\n        | exp MULT exp\n        | exp DIV exp\n        | exp MOD exp\n        | exp IGUAL exp\n        | exp DIFERENTE exp\n        | exp MENORIGUAL exp\n        | exp MAIORIGUAL exp\n        | exp MAIOR exp\n        | exp MENOR exp\n        | exp E exp\n        | exp OU exp\n        | NEG exp\n        | SINAL exp\n        | exp TERNARIOSE exp TERNARIOSENAO exp\n        | subCall\n        | var\n        | literal\n        | ABREPAREN exp FECHAPAREN\n        | param\n    \n    literal : NUMBER\n            | CADEIA\n            | TRUE\n            | FALSE\n    \n    paramList : paramSeq\n              | empty\n    \n    paramSeq : param VIRGULA paramSeq\n             | param\n    \n    varDecList : varDec varDecList\n               | empty\n    \n    varSpecSeq : varSpec VIRGULA varSpecSeq\n               | varSpec\n    \n    expList : expSeq\n            | empty\n    \n    literalSeq : literal VIRGULA literalSeq\n               | literal\n    \n    stmtList : stmt stmtList\n             | empty\n    \n    decSeq : dec decSeq\n           | dec\n    \n    expSeq : exp VIRGULA expSeq\n           | exp\n     empty : '
    
_lr_action_items = {'READ':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,52,-86,-86,-19,-16,-21,-20,-22,-18,52,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'INT':([0,5,6,10,20,23,27,37,45,48,55,70,72,75,76,80,81,83,89,92,94,95,96,97,98,99,105,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,165,167,168,180,181,],[3,-2,3,3,3,-5,3,3,3,3,3,3,-3,3,3,3,3,3,3,3,3,3,3,3,3,3,-4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'TRUE':([21,55,70,74,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,140,160,164,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'$end':([1,5,6,7,14,23,72,105,],[-1,-2,-83,0,-82,-5,-3,-4,]),'TERNARIOSENAO':([26,29,30,32,33,47,50,82,85,86,87,112,113,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,-57,-56,-34,-42,-62,-45,-48,-43,-47,-44,-54,-52,-53,164,-46,-49,-55,-50,-51,-58,]),'IGUAL':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,115,115,115,115,-57,-56,115,115,115,115,115,115,115,115,-34,-42,-62,-45,-48,-43,115,-44,115,-52,-53,115,-46,-49,115,-50,-51,115,115,]),'FALSE':([21,55,70,74,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,140,160,164,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'FECHAPAREN':([10,15,16,18,19,20,26,28,29,30,32,33,39,47,50,75,82,85,86,87,101,102,103,108,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,154,155,156,157,158,162,169,175,],[-86,25,-69,-68,-71,-86,-13,40,-67,-65,-66,-64,-70,-14,-41,-86,-61,-59,-60,-63,-77,-76,-85,142,144,-57,-56,159,161,-40,-35,-37,-39,-36,-38,-34,-42,-62,-45,-48,-43,-47,-44,-54,-52,-53,-46,-49,-55,-50,-51,-84,-58,178,]),'DIFERENTE':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,125,125,125,125,-57,-56,125,125,125,125,125,125,125,125,-34,-42,-62,-45,-48,-43,125,-44,125,-52,-53,125,-46,-49,125,-50,-51,125,125,]),'ABRECHAVE':([25,40,49,159,161,178,179,],[37,48,74,165,168,180,181,]),'FOR':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,60,-86,-86,-19,-16,-21,-20,-22,-18,60,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'MAIORIGUAL':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,128,128,128,128,-57,-56,128,128,128,128,128,128,128,128,-34,-42,-62,-45,128,-43,128,-44,128,-52,-53,128,-46,128,128,-50,-51,128,128,]),'MULT':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,114,114,114,114,-57,-56,114,114,114,114,114,114,114,114,-34,-42,-62,-45,114,114,114,114,114,114,114,114,-46,114,114,114,114,114,114,]),'VIRGULA':([11,13,19,26,29,30,31,32,33,36,41,47,50,82,85,86,87,103,106,112,113,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,157,158,169,],[-6,24,27,-13,-67,-65,-7,-66,-64,-6,-8,-14,-41,-61,-59,-60,-63,138,140,-57,-56,-9,-34,-42,-62,-45,-48,-43,-47,-44,-54,-52,-53,-46,-49,-55,-50,-51,-58,]),'MAIS':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,116,116,116,116,-57,-56,116,116,116,116,116,116,116,116,-34,-42,-62,-45,116,-43,116,-44,116,116,116,116,-46,116,116,116,116,116,116,]),'MENOS':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,118,118,118,118,-57,-56,118,118,118,118,118,118,118,118,-34,-42,-62,-45,118,-43,118,-44,118,118,118,118,-46,118,118,118,118,118,118,]),'RETURN':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,55,-86,-86,-19,-16,-21,-20,-22,-18,55,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'ABRECOLCH':([11,26,36,50,78,],[22,38,22,76,76,]),'FECHACHAVE':([23,29,30,32,33,37,42,43,45,46,48,53,54,57,58,59,62,63,65,68,69,71,73,77,84,91,93,100,106,107,110,120,139,161,163,165,167,168,170,172,173,174,177,180,181,182,183,184,185,],[-5,-67,-65,-66,-64,-86,-73,-86,-86,72,-86,-19,-81,-15,-16,-21,-20,-22,-18,-86,-17,-72,105,-23,-32,-29,-24,-80,-79,141,-30,-33,-31,167,-78,-86,-86,-86,174,176,177,-27,-25,-86,-86,184,185,-28,-26,]),'PONTOVIRGULA':([11,12,13,26,29,30,31,32,33,35,36,41,47,50,51,55,61,66,70,78,79,82,85,86,87,88,101,102,103,104,112,113,130,132,133,134,135,136,137,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,157,158,162,166,169,],[-6,23,-75,-13,-67,-65,-7,-66,-64,-74,-6,-8,-14,-41,77,84,91,93,-86,-41,110,-61,-59,-60,-63,120,-77,-76,-85,139,-57,-56,160,-40,-35,-37,-39,-36,-38,-9,-34,-42,-62,-45,-48,-43,-47,-44,-54,-52,-53,-46,-49,-55,-50,-51,-84,171,-58,]),'MAIOR':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,121,121,121,121,-57,-56,121,121,121,121,121,121,121,121,-34,-42,-62,-45,121,-43,121,-44,121,-52,-53,121,-46,121,121,-50,-51,121,121,]),'FECHACOLCH':([26,29,30,32,33,34,38,47,50,82,85,86,87,109,112,113,142,143,144,145,146,147,148,149,150,151,152,154,155,156,157,158,169,],[-13,-67,-65,-66,-64,41,47,-14,-41,-61,-59,-60,-63,143,-57,-56,-34,-42,-62,-45,-48,-43,-47,-44,-54,-52,-53,-46,-49,-55,-50,-51,-58,]),'NEG':([55,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'CADEIA':([21,55,70,74,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,140,160,164,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'NUMBER':([21,22,55,70,74,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,140,160,164,],[33,34,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'BREAK':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,61,-86,-86,-19,-16,-21,-20,-22,-18,61,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'ELSE':([176,],[179,]),'ID':([0,3,4,5,6,8,9,17,23,24,37,42,43,44,45,48,52,53,55,58,59,62,63,65,68,69,70,71,72,75,76,77,80,81,83,84,89,90,91,92,93,94,95,96,97,98,99,105,110,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,138,139,160,164,165,167,168,171,174,177,180,181,184,185,],[2,-10,11,-2,2,-12,-11,26,-5,36,-86,-73,50,36,-86,-86,78,-19,50,-16,-21,-20,-22,-18,50,-17,50,-72,-3,50,50,-23,50,50,50,-32,50,78,-29,50,-24,50,50,50,50,50,50,-4,-30,50,50,50,50,50,50,-33,50,50,50,50,50,50,50,50,50,-31,50,50,-86,-86,-86,78,-27,-25,-86,-86,-28,-26,]),'MENOR':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,122,122,122,122,-57,-56,122,122,122,122,122,122,122,122,-34,-42,-62,-45,122,-43,122,-44,122,-52,-53,122,-46,122,122,-50,-51,122,122,]),'MENOSATRIB':([50,67,78,143,],[-41,96,-41,-42,]),'SINAL':([55,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'E':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,119,119,119,119,-57,-56,119,119,119,119,119,119,119,119,-34,-42,-62,-45,-48,-43,119,-44,-54,-52,-53,119,-46,-49,119,-50,-51,119,119,]),'DIV':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,124,124,124,124,-57,-56,124,124,124,124,124,124,124,124,-34,-42,-62,-45,124,124,124,124,124,124,124,124,-46,124,124,124,124,124,124,]),'STRING':([0,5,6,10,20,23,27,37,45,48,55,70,72,75,76,80,81,83,89,92,94,95,96,97,98,99,105,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,165,167,168,180,181,],[9,-2,9,9,9,-5,9,9,9,9,9,9,-3,9,9,9,9,9,9,9,9,9,9,9,9,9,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'DIVATRIB':([50,67,78,143,],[-41,97,-41,-42,]),'ATRIB':([11,36,41,50,67,78,143,],[21,21,49,-41,95,-41,-42,]),'BOOL':([0,5,6,10,20,23,27,37,45,48,55,70,72,75,76,80,81,83,89,92,94,95,96,97,98,99,105,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,165,167,168,180,181,],[8,-2,8,8,8,-5,8,8,8,8,8,8,-3,8,8,8,8,8,8,8,8,8,8,8,8,8,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'WRITE':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,70,-86,-86,-19,-16,-21,-20,-22,-18,70,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'ABREPAREN':([2,11,50,55,56,60,64,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,],[10,20,75,80,89,90,92,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'MAISATRIB':([50,67,78,143,],[-41,98,-41,-42,]),'MOD':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,117,117,117,117,-57,-56,117,117,117,117,117,117,117,117,-34,-42,-62,-45,-48,-43,117,-44,-54,-52,-53,117,-46,-49,-55,-50,-51,117,117,]),'MULTATRIB':([50,67,78,143,],[-41,99,-41,-42,]),'IF':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,64,-86,-86,-19,-16,-21,-20,-22,-18,64,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'WHILE':([23,37,42,43,45,48,53,58,59,62,63,65,68,69,71,77,84,91,93,110,120,139,165,167,168,174,177,180,181,184,185,],[-5,-86,-73,56,-86,-86,-19,-16,-21,-20,-22,-18,56,-17,-72,-23,-32,-29,-24,-30,-33,-31,-86,-86,-86,-27,-25,-86,-86,-28,-26,]),'MODATRIB':([50,67,78,143,],[-41,94,-41,-42,]),'TERNARIOSE':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,123,123,123,123,-57,-56,123,123,123,123,123,123,123,123,-34,-42,-62,-45,-48,-43,123,-44,-54,-52,-53,123,-46,-49,-55,-50,-51,123,123,]),'OU':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,126,126,126,126,-57,-56,126,126,126,126,126,126,126,126,-34,-42,-62,-45,-48,-43,126,-44,-54,-52,-53,126,-46,-49,-55,-50,-51,126,126,]),'MENORIGUAL':([26,29,30,32,33,47,50,82,85,86,87,88,103,109,111,112,113,129,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,169,],[-13,-67,-65,-66,-64,-14,-41,-61,-59,-60,-63,127,127,127,127,-57,-56,127,127,127,127,127,127,127,127,-34,-42,-62,-45,127,-43,127,-44,127,-52,-53,127,-46,127,127,-50,-51,127,127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'varSpecSeq':([4,24,44,],[12,35,12,]),'assign':([43,68,90,171,],[51,51,130,175,]),'breakStmt':([43,68,],[53,53,]),'writeStmt':([43,68,],[63,63,]),'varDecList':([37,45,48,165,167,168,180,181,],[43,71,43,43,43,43,43,43,]),'literal':([21,55,70,74,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,140,160,164,],[31,82,82,106,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,106,82,82,]),'type':([0,6,10,20,27,37,45,48,55,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,165,167,168,180,181,],[4,4,17,17,17,44,44,44,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,44,44,44,44,44,]),'varDec':([0,6,37,45,48,165,167,168,180,181,],[5,5,45,45,45,45,45,45,45,45,]),'paramSeq':([10,20,27,],[18,18,39,]),'dec':([0,6,],[6,6,]),'expSeq':([70,75,138,],[102,102,162,]),'var':([43,52,55,68,70,75,76,80,81,83,89,90,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,171,],[67,79,86,67,86,86,86,86,86,86,86,67,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,67,]),'stmtList':([43,68,],[57,100,]),'whileStmt':([43,68,],[69,69,]),'ifStmt':([43,68,],[58,58,]),'readStmt':([43,68,],[59,59,]),'stmt':([43,68,],[68,68,]),'decSeq':([0,6,],[1,14,]),'paramList':([10,20,],[15,28,]),'returnStmt':([43,68,],[62,62,]),'empty':([10,20,37,43,45,48,68,70,75,165,167,168,180,181,],[16,16,42,54,42,42,54,101,101,42,42,42,42,42,]),'forStmt':([43,68,],[65,65,]),'subCall':([43,55,68,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,],[66,85,66,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'varSpec':([4,24,44,],[13,13,13,]),'program':([0,],[7,]),'param':([10,20,27,55,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,],[19,19,19,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'block':([37,48,165,167,168,180,181,],[46,73,170,172,173,182,183,]),'exp':([55,70,75,76,80,81,83,89,92,94,95,96,97,98,99,114,115,116,117,118,119,121,122,123,124,125,126,127,128,138,160,164,],[88,103,103,109,111,112,113,129,131,132,133,134,135,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,103,166,169,]),'literalSeq':([74,140,],[107,163,]),'expList':([70,75,],[104,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','parser.py',28),
  ('dec -> varDec','dec',1,'p_dec','parser.py',34),
  ('dec -> ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE','dec',7,'p_dec','parser.py',35),
  ('dec -> type ID ABREPAREN paramList FECHAPAREN ABRECHAVE block FECHACHAVE','dec',8,'p_dec','parser.py',36),
  ('varDec -> type varSpecSeq PONTOVIRGULA','varDec',3,'p_var_dec','parser.py',47),
  ('varSpec -> ID','varSpec',1,'p_var_spec','parser.py',53),
  ('varSpec -> ID ATRIB literal','varSpec',3,'p_var_spec','parser.py',54),
  ('varSpec -> ID ABRECOLCH NUMBER FECHACOLCH','varSpec',4,'p_var_spec','parser.py',55),
  ('varSpec -> ID ABRECOLCH NUMBER FECHACOLCH ATRIB ABRECHAVE literalSeq FECHACHAVE','varSpec',8,'p_var_spec','parser.py',56),
  ('type -> INT','type',1,'p_type','parser.py',70),
  ('type -> STRING','type',1,'p_type','parser.py',71),
  ('type -> BOOL','type',1,'p_type','parser.py',72),
  ('param -> type ID','param',2,'p_param','parser.py',79),
  ('param -> type ID ABRECOLCH FECHACOLCH','param',4,'p_param','parser.py',80),
  ('block -> varDecList stmtList','block',2,'p_block','parser.py',89),
  ('stmt -> ifStmt','stmt',1,'p_stmt','parser.py',95),
  ('stmt -> whileStmt','stmt',1,'p_stmt','parser.py',96),
  ('stmt -> forStmt','stmt',1,'p_stmt','parser.py',97),
  ('stmt -> breakStmt','stmt',1,'p_stmt','parser.py',98),
  ('stmt -> returnStmt','stmt',1,'p_stmt','parser.py',99),
  ('stmt -> readStmt','stmt',1,'p_stmt','parser.py',100),
  ('stmt -> writeStmt','stmt',1,'p_stmt','parser.py',101),
  ('stmt -> assign PONTOVIRGULA','stmt',2,'p_stmt','parser.py',102),
  ('stmt -> subCall PONTOVIRGULA','stmt',2,'p_stmt','parser.py',103),
  ('ifStmt -> IF ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE','ifStmt',7,'p_if_stmt','parser.py',110),
  ('ifStmt -> IF ABREPAREN exp FECHAPAREN FECHACHAVE block FECHACHAVE ELSE ABRECHAVE block FECHACHAVE','ifStmt',11,'p_if_stmt','parser.py',111),
  ('whileStmt -> WHILE ABREPAREN exp FECHAPAREN ABRECHAVE block FECHACHAVE','whileStmt',7,'p_while_stmt','parser.py',120),
  ('forStmt -> FOR ABREPAREN assign PONTOVIRGULA exp PONTOVIRGULA assign FECHAPAREN ABRECHAVE block FECHACHAVE','forStmt',11,'p_for_stmt','parser.py',125),
  ('breakStmt -> BREAK PONTOVIRGULA','breakStmt',2,'p_break_stmt','parser.py',130),
  ('readStmt -> READ var PONTOVIRGULA','readStmt',3,'p_read_stmt','parser.py',135),
  ('writeStmt -> WRITE expList PONTOVIRGULA','writeStmt',3,'p_write_stmt','parser.py',140),
  ('returnStmt -> RETURN PONTOVIRGULA','returnStmt',2,'p_return_stmt','parser.py',146),
  ('returnStmt -> RETURN exp PONTOVIRGULA','returnStmt',3,'p_return_stmt','parser.py',147),
  ('subCall -> ID ABREPAREN expList FECHAPAREN','subCall',4,'p_sub_call','parser.py',156),
  ('assign -> var ATRIB exp','assign',3,'p_assign','parser.py',162),
  ('assign -> var MAISATRIB exp','assign',3,'p_assign','parser.py',163),
  ('assign -> var MENOSATRIB exp','assign',3,'p_assign','parser.py',164),
  ('assign -> var MULTATRIB exp','assign',3,'p_assign','parser.py',165),
  ('assign -> var DIVATRIB exp','assign',3,'p_assign','parser.py',166),
  ('assign -> var MODATRIB exp','assign',3,'p_assign','parser.py',167),
  ('var -> ID','var',1,'p_var','parser.py',174),
  ('var -> ID ABRECOLCH exp FECHACOLCH','var',4,'p_var','parser.py',175),
  ('exp -> exp MAIS exp','exp',3,'p_exp','parser.py',185),
  ('exp -> exp MENOS exp','exp',3,'p_exp','parser.py',186),
  ('exp -> exp MULT exp','exp',3,'p_exp','parser.py',187),
  ('exp -> exp DIV exp','exp',3,'p_exp','parser.py',188),
  ('exp -> exp MOD exp','exp',3,'p_exp','parser.py',189),
  ('exp -> exp IGUAL exp','exp',3,'p_exp','parser.py',190),
  ('exp -> exp DIFERENTE exp','exp',3,'p_exp','parser.py',191),
  ('exp -> exp MENORIGUAL exp','exp',3,'p_exp','parser.py',192),
  ('exp -> exp MAIORIGUAL exp','exp',3,'p_exp','parser.py',193),
  ('exp -> exp MAIOR exp','exp',3,'p_exp','parser.py',194),
  ('exp -> exp MENOR exp','exp',3,'p_exp','parser.py',195),
  ('exp -> exp E exp','exp',3,'p_exp','parser.py',196),
  ('exp -> exp OU exp','exp',3,'p_exp','parser.py',197),
  ('exp -> NEG exp','exp',2,'p_exp','parser.py',198),
  ('exp -> SINAL exp','exp',2,'p_exp','parser.py',199),
  ('exp -> exp TERNARIOSE exp TERNARIOSENAO exp','exp',5,'p_exp','parser.py',200),
  ('exp -> subCall','exp',1,'p_exp','parser.py',201),
  ('exp -> var','exp',1,'p_exp','parser.py',202),
  ('exp -> literal','exp',1,'p_exp','parser.py',203),
  ('exp -> ABREPAREN exp FECHAPAREN','exp',3,'p_exp','parser.py',204),
  ('exp -> param','exp',1,'p_exp','parser.py',205),
  ('literal -> NUMBER','literal',1,'p_literal','parser.py',222),
  ('literal -> CADEIA','literal',1,'p_literal','parser.py',223),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',224),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',225),
  ('paramList -> paramSeq','paramList',1,'p_param_list','parser.py',232),
  ('paramList -> empty','paramList',1,'p_param_list','parser.py',233),
  ('paramSeq -> param VIRGULA paramSeq','paramSeq',3,'p_param_seq','parser.py',240),
  ('paramSeq -> param','paramSeq',1,'p_param_seq','parser.py',241),
  ('varDecList -> varDec varDecList','varDecList',2,'p_var_dec_list','parser.py',251),
  ('varDecList -> empty','varDecList',1,'p_var_dec_list','parser.py',252),
  ('varSpecSeq -> varSpec VIRGULA varSpecSeq','varSpecSeq',3,'p_var_spec_seq','parser.py',260),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_var_spec_seq','parser.py',261),
  ('expList -> expSeq','expList',1,'p_exp_list','parser.py',271),
  ('expList -> empty','expList',1,'p_exp_list','parser.py',272),
  ('literalSeq -> literal VIRGULA literalSeq','literalSeq',3,'p_literal_seq','parser.py',280),
  ('literalSeq -> literal','literalSeq',1,'p_literal_seq','parser.py',281),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmt_list','parser.py',291),
  ('stmtList -> empty','stmtList',1,'p_stmt_list','parser.py',292),
  ('decSeq -> dec decSeq','decSeq',2,'p_dec_seq','parser.py',300),
  ('decSeq -> dec','decSeq',1,'p_dec_seq','parser.py',301),
  ('expSeq -> exp VIRGULA expSeq','expSeq',3,'p_exp_seq','parser.py',311),
  ('expSeq -> exp','expSeq',1,'p_exp_seq','parser.py',312),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',321),
]
